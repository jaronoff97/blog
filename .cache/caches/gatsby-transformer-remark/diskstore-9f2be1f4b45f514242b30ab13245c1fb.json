{"expireTime":9007200815377754000,"key":"transformer-remark-markdown-html-f3b5adae387df8660d528fa764e346bf-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>Now that we’ve gotten over the hurdle of closures we can learn the last three things we need to know before we start iOS programming. Let’s start with Optionals.</p>\n<p>Let’s make a class with a couple properties</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">var</span> street<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> jacob <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>jacob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>When you run this code, you’ll get two errors:</p>\n<ul>\n<li>return from initializer without initializing all stored properties</li>\n<li>note: ‘self.street’ not initialized</li>\n</ul>\n<p>This is because the Person class’s <strong>street</strong> cannot be <strong>nil</strong>. In order to make this work we use what’s called an optional. An optional allows our variables to be <strong>nil</strong>, so that we can work with variables whose contents we don’t know. Our new code with optionals looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">var</span> street<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token comment\">//We use a question mark</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> jacob <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>jacob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let’s say we wanted to print out the persons street. First we would want to check if the street is nil, if it is, we should let the user know, if it isn’t lets print it! Now you’re probably thinking of doing it this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> jacob<span class=\"token punctuation\">.</span>street <span class=\"token operator\">!=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not nil!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Its nil!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now this totally works, but it’s not the swifty way of doing this. Here’s the swifty way:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> street <span class=\"token operator\">=</span> jacob<span class=\"token punctuation\">.</span>street <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>street<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Its nil!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is using a new kind of operation named <strong>if let</strong>, basically, we set a variable equal to the optional, and use that variable if it can be <strong>unwrapped</strong> safely, <strong>else</strong> do something. Unwrapping is forcing an optional variable to be its type. Let’s look back at our first example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">jacob<span class=\"token punctuation\">.</span>street <span class=\"token operator\">=</span> <span class=\"token string\">\"170 Centre St\"</span>\n<span class=\"token keyword\">if</span> jacob<span class=\"token punctuation\">.</span>street <span class=\"token operator\">!=</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>jacob<span class=\"token punctuation\">.</span>street<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Its nil!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case because <strong>jacob.street</strong> isn’t nil we want to print it. However, if we don’t have the <strong>!</strong>, the output of the print would be: “Optional(“170 Centre St”)” instead of “170 Centre St”. The reason it’s best to use <strong>if let</strong> is because it can be dangerous to your program to use <strong>!</strong> carelessly. Now on to our next topic: protocols.</p>\n<p>Protocols are similar to interfaces in java. <strong>Protocols</strong> can require <strong>variables</strong> or <strong>functions</strong>.</p>\n<p>Let’s say we want to mail something to either a person or a business. The two classes have very different properties, however, if they both follow the MailingAddress protocol, it can be made much easier.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">MailingAddress</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">MailingAddress</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">var</span> street<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n\n  <span class=\"token keyword\">var</span> address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> street <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>street<span class=\"token delimiter variable\">)</span></span>\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>, No address given\"</span>\n      <span class=\"token punctuation\">}</span>\n      \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Business</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">MailingAddress</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">var</span> <span class=\"token builtin\">PObox</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">var</span> street<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">var</span> address<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token builtin\">PObox</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">PObox</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>street<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token builtin\">PObox</span><span class=\"token delimiter variable\">)</span></span>\"</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>street<span class=\"token delimiter variable\">)</span></span>\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> street<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>street <span class=\"token operator\">=</span> street\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> jacob <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\njacob<span class=\"token punctuation\">.</span>street <span class=\"token operator\">=</span> <span class=\"token string\">\"170 Centre St, Milton, Ma\"</span>\n<span class=\"token keyword\">let</span> apple <span class=\"token operator\">=</span> <span class=\"token function\">Business</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Apple, Inc.\"</span><span class=\"token punctuation\">,</span> street<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1 Infinite Loop, Cupertino, CA\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>jacob<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So as you can see both <strong>classes</strong> and <strong>structs</strong> can conform to protocols. But lets make this a bit more interesting:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">print_address</span><span class=\"token punctuation\">(</span>something_that_conforms<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MailingAddress</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>something_that_conforms<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print_address</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print_address</span><span class=\"token punctuation\">(</span>jacob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So with this method, because it takes a MailingAddress as a parameter, we can pass in anything that conforms to the protocol. Let’s say for some reason we wanted the <strong>Int class</strong> to conform to a protocol which returns a textual representation of itself. To do this you may think to make a new class which inherits from the <strong>Int</strong> class. Although that’s a good idea, there’s actually a much <strong>swiftier</strong> way of doing so. We use what’s called an <strong>extension</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token builtin\">TextRepresentable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TextRepresentable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">String</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token delimiter variable\">)</span></span>\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> some_number <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>some_number<span class=\"token punctuation\">.</span><span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can do this for more than just Swift Classes though, let’s say we want our Person and Business classes to conform to the TextRepresentable protocol as well. We can easily just make an extension to handle the conforming. </p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TextRepresentable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">String</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>age<span class=\"token delimiter variable\">)</span></span> years old\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">Business</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TextRepresentable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">String</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>address<span class=\"token delimiter variable\">)</span></span>\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>jacob<span class=\"token punctuation\">.</span><span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">.</span><span class=\"token function\">represent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Probably throughout the series so far you may have questioned why some of these more advanced concepts are useful. Well, in our next tutorial we go throw basic iOS development, and hopefully you’ll see why things like closures, protocols, extensions, and optionals are so amazing.</p>\n<p>{% gist 3fb41a10d7da9abb919b052cda2aa780 %}</p>"}