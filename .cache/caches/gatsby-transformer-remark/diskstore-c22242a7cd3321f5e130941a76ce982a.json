{"expireTime":9007200815377754000,"key":"transformer-remark-markdown-ast-3054d2342d6fefd238f9c5449dc7b044-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"link","url":"#ds-4100-data-collection-integration-and-analysis","title":null,"data":{"hProperties":{"aria-label":"ds 4100 data collection integration and analysis permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"DS 4100 Data Collection, Integration, and Analysis","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":55,"offset":55},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":55,"offset":55},"indent":[]},"data":{"id":"ds-4100-data-collection-integration-and-analysis","htmlAttributes":{"id":"ds-4100-data-collection-integration-and-analysis"},"hProperties":{"id":"ds-4100-data-collection-integration-and-analysis"}}},{"type":"paragraph","children":[{"type":"text","value":"Day 3, we’re going over basic control flow:","position":{"start":{"line":4,"column":1,"offset":57},"end":{"line":4,"column":44,"offset":100},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":57},"end":{"line":4,"column":44,"offset":100},"indent":[]}},{"type":"html","lang":"R","value":"<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  print<span class=\"token punctuation\">(</span>paste<span class=\"token punctuation\">(</span><span class=\"token string\">\"i =\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token string\">\"i = 1\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token string\">\"i = 2\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token string\">\"i = 3\"</span>\n\n<span class=\"token operator\">></span> i\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">3</span>\n\n\n\ncities <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">(</span><span class=\"token string\">\"Boston\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"San Francisco\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>city <span class=\"token keyword\">in</span> cities<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tprint<span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":6,"column":1,"offset":102},"end":{"line":23,"column":4,"offset":296},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use for loops to iterate data frames. ","position":{"start":{"line":26,"column":1,"offset":299},"end":{"line":26,"column":52,"offset":350},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":299},"end":{"line":26,"column":52,"offset":350},"indent":[]}},{"type":"html","lang":"R","value":"<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># create a data frame</span>\nc1<span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BB\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CC\"</span><span class=\"token punctuation\">)</span>\nc2<span class=\"token operator\">&lt;-</span>c<span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token operator\">&lt;-</span>data.frame<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># display data frame</span>\ndf\n\n<span class=\"token comment\"># len() returns the number of columns</span>\nlen<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># nrow() returns the number of rows</span>\nnrow<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\ntraverseDF <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  n<span class=\"token operator\">&lt;-</span>nrow<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># access column 2 in row i</span>\n    print<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># or this way</span>\n    print<span class=\"token punctuation\">(</span>df<span class=\"token operator\">$</span>c2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":28,"column":1,"offset":352},"end":{"line":51,"column":4,"offset":715},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we’re talking a bit more about enviroments which I went over in my most recent ","position":{"start":{"line":54,"column":1,"offset":718},"end":{"line":54,"column":84,"offset":801},"indent":[]}},{"type":"link","title":null,"url":"http://jaronoff.com/learning-r-part-6","children":[{"type":"text","value":"Learning R","position":{"start":{"line":54,"column":85,"offset":802},"end":{"line":54,"column":95,"offset":812},"indent":[]}}],"position":{"start":{"line":54,"column":84,"offset":801},"end":{"line":54,"column":135,"offset":852},"indent":[]}},{"type":"text","value":". Now we’re on to more column manipulation:","position":{"start":{"line":54,"column":135,"offset":852},"end":{"line":54,"column":178,"offset":895},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":718},"end":{"line":54,"column":178,"offset":895},"indent":[]}},{"type":"html","lang":"R","value":"<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> ap<span class=\"token operator\">$</span>Total <span class=\"token operator\">&lt;-</span> cbind<span class=\"token punctuation\">(</span>rowSums<span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> ap\n    V1  V2  V3  V4  V5  V6  V7  V8  V9 V10 V11 V12 V13 Total\n<span class=\"token number\">1</span> <span class=\"token number\">1952</span> <span class=\"token number\">171</span> <span class=\"token number\">180</span> <span class=\"token number\">193</span> <span class=\"token number\">181</span> <span class=\"token number\">183</span> <span class=\"token number\">218</span> <span class=\"token number\">230</span> <span class=\"token number\">242</span> <span class=\"token number\">209</span> <span class=\"token number\">191</span> <span class=\"token number\">172</span> <span class=\"token number\">194</span>  <span class=\"token number\">4316</span>\n<span class=\"token number\">2</span> <span class=\"token number\">1953</span> <span class=\"token number\">196</span> <span class=\"token number\">196</span> <span class=\"token number\">236</span> <span class=\"token number\">235</span> <span class=\"token number\">229</span> <span class=\"token number\">243</span> <span class=\"token number\">264</span> <span class=\"token number\">272</span> <span class=\"token number\">237</span> <span class=\"token number\">211</span> <span class=\"token number\">180</span> <span class=\"token number\">201</span>  <span class=\"token number\">4653</span>\n<span class=\"token number\">3</span> <span class=\"token number\">1954</span> <span class=\"token number\">204</span> <span class=\"token number\">188</span> <span class=\"token number\">235</span> <span class=\"token number\">227</span> <span class=\"token number\">234</span> <span class=\"token number\">264</span> <span class=\"token number\">302</span> <span class=\"token number\">293</span> <span class=\"token number\">259</span> <span class=\"token number\">229</span> <span class=\"token number\">203</span> <span class=\"token number\">229</span>  <span class=\"token number\">4821</span>\n<span class=\"token operator\">></span> </code></pre></div>","position":{"start":{"line":57,"column":1,"offset":898},"end":{"line":66,"column":4,"offset":1193},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that’s pretty cool, you can add a new column which is just the sum. Just like excel, but with code <3. Here’s some really nice syntax. R redeems itself in regards to it’s data management. Now onto R’s naming conventions and data types:","position":{"start":{"line":68,"column":1,"offset":1195},"end":{"line":68,"column":240,"offset":1434},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1195},"end":{"line":68,"column":240,"offset":1434},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"R usually uses lower camel case","position":{"start":{"line":70,"column":3,"offset":1438},"end":{"line":70,"column":34,"offset":1469},"indent":[]}}],"position":{"start":{"line":70,"column":3,"offset":1438},"end":{"line":70,"column":34,"offset":1469},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1436},"end":{"line":70,"column":34,"offset":1469},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Modes are weird (their sort of like thunks almost)","position":{"start":{"line":71,"column":3,"offset":1472},"end":{"line":71,"column":53,"offset":1522},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":1472},"end":{"line":71,"column":53,"offset":1522},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1470},"end":{"line":71,"column":53,"offset":1522},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Factors are more efficient","position":{"start":{"line":72,"column":3,"offset":1525},"end":{"line":72,"column":29,"offset":1551},"indent":[]}}],"position":{"start":{"line":72,"column":3,"offset":1525},"end":{"line":72,"column":29,"offset":1551},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":1523},"end":{"line":72,"column":29,"offset":1551},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1436},"end":{"line":72,"column":29,"offset":1551},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And thats it! Next class is going to be more on factors, sadly I won’t be there :( but I’ll have my friend tell me what happened.","position":{"start":{"line":74,"column":1,"offset":1553},"end":{"line":74,"column":130,"offset":1682},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1553},"end":{"line":74,"column":130,"offset":1682},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":98,"column":1,"offset":1706}}}}