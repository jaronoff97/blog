{"expireTime":9007200815366030000,"key":"transformer-remark-markdown-html-b5e1fc15eaccd6026837172b1ae1f41f-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h3 id=\"object-oriented-design\"><a href=\"#object-oriented-design\" aria-label=\"object oriented design permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Oriented Design</h3>\n<p>This is my first post for OOD, I’m going to be using this as a place to take notes and write code.</p>\n<p><a href=\"http://www.ccs.neu.edu/course/cs3500/\">Course Website</a></p>\n<p>They say to use IntteliJ but like almost everything else I’m going to try and only use Sublime Text. I may have to make custom build scripts to match intelliJ projects, but I hate Android Studio (an IntelliJ fork) so I’m really going to try and steer clear from that. </p>\n<h2 id=\"lecture-schedule\"><a href=\"#lecture-schedule\" aria-label=\"lecture schedule permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lecture Schedule</h2>\n<p>Why object-oriented design?</p>\n<p>The essence of objects</p>\n<p>Java review</p>\n<p>Java safari</p>\n<p>Java safari (part 2)</p>\n<p>Version control with Git</p>\n<p>Introducing the Model, and the Builder pattern</p>\n<p>Controllers and Mocks;\nClass Activity: abstracting I/O</p>\n<p>Design critique: testing, toString, Pile abstractions, I/O</p>\n<p>Encapsulation and Invariants</p>\n<p>Design exercise: Turtles</p>\n<p>Inheritance vs. composition</p>\n<p>Intro to Performance</p>\n<p>First exam</p>\n<p>Design critique: music models</p>\n<p>Class activity: GUI, MIDI basics</p>\n<p>MVC code, starter code and code</p>\n<p>The Adapter pattern</p>\n<p>Commands</p>\n<p>The strategy and decorator patterns</p>\n<p>Class activity: Strategic FreeCell</p>\n<p>Case study: Interpreters</p>\n<p>Case study: Interpreters</p>\n<p>Introduction to JavaScript</p>\n<p>JavaScript inheritance and patterns</p>\n<p>Exam review</p>\n<p>Promises</p>\n<p>Final exam</p>\n<p>Bonus lecture (Android?)</p>\n<h2 id=\"thoughts\"><a href=\"#thoughts\" aria-label=\"thoughts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thoughts</h2>\n<p>Looks like it’ll be a good semester. One of the main projects of the semester is making a musicplayer (which I’ve already done in java) so that’ll be really fun. Also excited to see javascript at the end of the semester as that’s always a mess. It also seems like they’re going to have another git tutorial <strong>:(</strong>. </p>\n<h2 id=\"why-ood\"><a href=\"#why-ood\" aria-label=\"why ood permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why OOD?</h2>\n<p>Software isn’t easy. Writing good software is a tough pursuit. Writing something that converts farenheit to celsius is easy.</p>\n<div class=\"gatsby-highlight\" data-language=\"racket\"><pre class=\"language-racket\"><code class=\"language-racket\">(define (f-&gt;c F) (* 5/8 (- F 32)))\n(f-&gt;c 212)</code></pre></div>\n<p>Programs get big</p>\n<ul>\n<li>Windows NT 3.1 had 4 million lines of code</li>\n<li>Windows 2000 had 29 million </li>\n<li>Windows server 2003 had 50 million</li>\n</ul>\n<p>A lot of software development is maintainance. How do we start thinking about such big programs? These complex parts are all made from simple ones. It’s totally possible to write programs that we cannot completely understand. You can work on one part of a program without understanding the rest. This is only possible with extensibility. Software is ALWAYS bound to change:</p>\n<ul>\n<li>Customers don’t know what they want</li>\n<li>What they want always changes too</li>\n<li>Very few things in the real world are black &#x26; white</li>\n</ul>\n<h1 id=\"software-developement-life-cycle\"><a href=\"#software-developement-life-cycle\" aria-label=\"software developement life cycle permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Software developement life cycle</h1>\n<ol>\n<li>\n<p>Analysis</p>\n</li>\n<li>\n<p>Design</p>\n</li>\n<li>\n<p>Implementation</p>\n</li>\n<li>\n<p>Testing</p>\n</li>\n<li>\n<p>Deployment</p>\n</li>\n<li>\n<p>Evaluation</p>\n</li>\n<li>\n<p>GOTO 1</p>\n</li>\n</ol>\n<p><strong>Things don’t look like this in practice. In practice they look like:</strong></p>\n<ol>\n<li>\n<p>Cursory analysis</p>\n</li>\n<li>\n<p>Completely wrong implementation</p>\n</li>\n<li>\n<p>Slightly less cursory analysis</p>\n</li>\n<li>\n<p>Wrong headed design</p>\n</li>\n<li>\n<p>Some implementation and testing</p>\n</li>\n<li>\n<p>More analysis and re-design</p>\n</li>\n<li>\n<p>More implementation and testing</p>\n</li>\n<li>\n<p>Iterate, iterate, iterate</p>\n</li>\n<li>\n<p>Deployment</p>\n</li>\n<li>\n<p>Bug reports (yay!)</p>\n</li>\n<li>\n<p>Head scratching</p>\n</li>\n<li>\n<p>Coffee</p>\n</li>\n<li>\n<p>Temptation to re-write from scratch</p>\n</li>\n</ol>\n<p><strong>One possible answer is object oriented design</strong></p>\n<p>OOD is a set of principles to avoid the previous list. What is it?\nCentral concepts:</p>\n<ul>\n<li>Information hiding</li>\n<li>Polymorphism</li>\n<li>Interfaces</li>\n</ul>\n<p>Loose coupling:</p>\n<ul>\n<li>Replacement</li>\n<li>Reuse</li>\n</ul>\n<p><strong>SOLID</strong> Principles:</p>\n<ul>\n<li><strong>S</strong>ingle responsibility, meaning that each class should have a single responsibility or purpose.</li>\n<li><strong>O</strong>pen/closed, meaning that interfaces should be open to reimplementation, and that clients should not require modification.</li>\n<li><strong>L</strong>iskov substitution, meaning that objects of subtypes may be used anywhere that the supertype can be used.</li>\n<li><strong>I</strong>nterface segregation, meaning that classes should offer small, specialized interfaces for different kinds of clients.</li>\n<li><strong>D</strong>ependency inversion, meaning that details should depend on abstractions rather than abstractions depending on details.</li>\n</ul>\n<p>“Good Software”:</p>\n<ul>\n<li>Correctness</li>\n<li>Efficiency</li>\n<li>Security</li>\n<li>Extensibility</li>\n<li>Scalability</li>\n<li>Reliability</li>\n<li>(insert buzz word)</li>\n</ul>\n<p>This course is about hitting more of these things. There’s a special point between efficiency and abstraction. It’s important to understand the code that you wrote. </p>\n<p><strong>Course Topics</strong>:</p>\n<ul>\n<li>What are objects all about?</li>\n<li>Interface polymorphism</li>\n<li>Data abstraction and encapsulation</li>\n<li>Client perspective vs implementor perspective</li>\n<li>Testing</li>\n<li>Algorithmic efficiency</li>\n<li>Software archeaology</li>\n<li>Class diagrams</li>\n<li>design patterns</li>\n</ul>"}