{"expireTime":9007200815377753000,"key":"transformer-remark-markdown-ast-e0a57ea4c18a0fd56859134ab34c2d57-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"So lets make a program that uses everything we’ve learned. Let’s make a todolist!","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":82,"offset":82},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":82,"offset":82},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">todos<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#Make an empty list of our todos</span></code></pre></div>","position":{"start":{"line":4,"column":1,"offset":84},"end":{"line":6,"column":4,"offset":140},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now to introduce a new way of programming in python","position":{"start":{"line":7,"column":1,"offset":141},"end":{"line":7,"column":52,"offset":192},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":141},"end":{"line":7,"column":52,"offset":192},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">todos<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#something will go here</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":9,"column":1,"offset":194},"end":{"line":17,"column":4,"offset":297},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve seen the first part before, we’re just making a method called main that takes no parameters. The second part is a bit weird, though. What it’s saying is if some variable built-in to python is equal to ","position":{"start":{"line":19,"column":1,"offset":299},"end":{"line":19,"column":208,"offset":506},"indent":[]}},{"type":"strong","children":[{"type":"strong","children":[{"type":"text","value":"main","position":{"start":{"line":19,"column":212,"offset":510},"end":{"line":19,"column":216,"offset":514},"indent":[]}}],"position":{"start":{"line":19,"column":210,"offset":508},"end":{"line":19,"column":218,"offset":516},"indent":[]}}],"position":{"start":{"line":19,"column":208,"offset":506},"end":{"line":19,"column":220,"offset":518},"indent":[]}},{"type":"text","value":" call the ","position":{"start":{"line":19,"column":220,"offset":518},"end":{"line":19,"column":230,"offset":528},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"main()","position":{"start":{"line":19,"column":232,"offset":530},"end":{"line":19,"column":238,"offset":536},"indent":[]}}],"position":{"start":{"line":19,"column":230,"offset":528},"end":{"line":19,"column":240,"offset":538},"indent":[]}},{"type":"text","value":" method. Great so now lets add some input","position":{"start":{"line":19,"column":240,"offset":538},"end":{"line":19,"column":281,"offset":579},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":299},"end":{"line":19,"column":281,"offset":579},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">todos<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to your todolist!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"When you're done entering your todos type 'Done!'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        add_todo <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name a thing you have to do: \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"Done!\"</span> <span class=\"token keyword\">in</span> add_todo<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":21,"column":1,"offset":581},"end":{"line":35,"column":4,"offset":888},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"We use ","position":{"start":{"line":37,"column":3,"offset":892},"end":{"line":37,"column":10,"offset":899},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"raw_input()","position":{"start":{"line":37,"column":12,"offset":901},"end":{"line":37,"column":23,"offset":912},"indent":[]}}],"position":{"start":{"line":37,"column":10,"offset":899},"end":{"line":37,"column":25,"offset":914},"indent":[]}},{"type":"text","value":" for strings and ","position":{"start":{"line":37,"column":25,"offset":914},"end":{"line":37,"column":42,"offset":931},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"input()","position":{"start":{"line":37,"column":44,"offset":933},"end":{"line":37,"column":51,"offset":940},"indent":[]}}],"position":{"start":{"line":37,"column":42,"offset":931},"end":{"line":37,"column":53,"offset":942},"indent":[]}},{"type":"text","value":" for numbers","position":{"start":{"line":37,"column":53,"offset":942},"end":{"line":37,"column":65,"offset":954},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":892},"end":{"line":37,"column":65,"offset":954},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":890},"end":{"line":37,"column":65,"offset":954},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay so we’ve seen the first part before, were printing out some stuff to notify our user. We’ve seen a while loop before, but what’s in the parenthesis? We call that a boolean, the most simple variable in any programming language. A boolean is either ","position":{"start":{"line":39,"column":1,"offset":956},"end":{"line":39,"column":253,"offset":1208},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"True","position":{"start":{"line":39,"column":255,"offset":1210},"end":{"line":39,"column":259,"offset":1214},"indent":[]}}],"position":{"start":{"line":39,"column":253,"offset":1208},"end":{"line":39,"column":261,"offset":1216},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":39,"column":261,"offset":1216},"end":{"line":39,"column":265,"offset":1220},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"False","position":{"start":{"line":39,"column":267,"offset":1222},"end":{"line":39,"column":272,"offset":1227},"indent":[]}}],"position":{"start":{"line":39,"column":265,"offset":1220},"end":{"line":39,"column":274,"offset":1229},"indent":[]}},{"type":"text","value":". We’ve actually been using booleans a lot, when we ask a question ","position":{"start":{"line":39,"column":274,"offset":1229},"end":{"line":39,"column":341,"offset":1296},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"if","position":{"start":{"line":39,"column":343,"offset":1298},"end":{"line":39,"column":345,"offset":1300},"indent":[]}}],"position":{"start":{"line":39,"column":341,"offset":1296},"end":{"line":39,"column":347,"offset":1302},"indent":[]}},{"type":"text","value":" it is ","position":{"start":{"line":39,"column":347,"offset":1302},"end":{"line":39,"column":354,"offset":1309},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"True","position":{"start":{"line":39,"column":356,"offset":1311},"end":{"line":39,"column":360,"offset":1315},"indent":[]}}],"position":{"start":{"line":39,"column":354,"offset":1309},"end":{"line":39,"column":362,"offset":1317},"indent":[]}},{"type":"text","value":" then it’ll do the next block of code ","position":{"start":{"line":39,"column":362,"offset":1317},"end":{"line":39,"column":400,"offset":1355},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"else","position":{"start":{"line":39,"column":402,"offset":1357},"end":{"line":39,"column":406,"offset":1361},"indent":[]}}],"position":{"start":{"line":39,"column":400,"offset":1355},"end":{"line":39,"column":408,"offset":1363},"indent":[]}},{"type":"text","value":" if it’s false it will do another thing. Next, we ask the user to input the name of their todo item. We then ask if the phrase “Done!” is in the user’s input. If it is, then ","position":{"start":{"line":39,"column":408,"offset":1363},"end":{"line":39,"column":582,"offset":1537},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"break","position":{"start":{"line":39,"column":584,"offset":1539},"end":{"line":39,"column":589,"offset":1544},"indent":[]}}],"position":{"start":{"line":39,"column":582,"offset":1537},"end":{"line":39,"column":591,"offset":1546},"indent":[]}},{"type":"text","value":" the while loop. Break is used to stop a while loop, if we didn’t have this, our program would go on forever! Now let’s make a todo item:","position":{"start":{"line":39,"column":591,"offset":1546},"end":{"line":39,"column":728,"offset":1683},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":956},"end":{"line":39,"column":728,"offset":1683},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">todos<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to your todolist!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"When you're done entering your todos type 'Done!'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        add_todo <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name a thing you have to do: \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"Done!\"</span> <span class=\"token keyword\">in</span> add_todo<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        todos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>make_todo<span class=\"token punctuation\">(</span>add_todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_todo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    due_date <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"When is this due? \"</span><span class=\"token punctuation\">)</span>\n    category <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What category is this? \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"due_date\"</span><span class=\"token punctuation\">:</span> due_date<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"category\"</span><span class=\"token punctuation\">:</span> category<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":41,"column":1,"offset":1685},"end":{"line":67,"column":4,"offset":2290},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Great, so now we call the method ","position":{"start":{"line":70,"column":1,"offset":2293},"end":{"line":70,"column":34,"offset":2326},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"make_todo","position":{"start":{"line":70,"column":36,"offset":2328},"end":{"line":70,"column":45,"offset":2337},"indent":[]}}],"position":{"start":{"line":70,"column":34,"offset":2326},"end":{"line":70,"column":47,"offset":2339},"indent":[]}},{"type":"text","value":" to construct our item. Inside that method we ask the user for a due date and a category. We then return a dictionary with the corresponding keys and values for our items. We also give our item the key ","position":{"start":{"line":70,"column":47,"offset":2339},"end":{"line":70,"column":249,"offset":2541},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"number","position":{"start":{"line":70,"column":251,"offset":2543},"end":{"line":70,"column":257,"offset":2549},"indent":[]}}],"position":{"start":{"line":70,"column":249,"offset":2541},"end":{"line":70,"column":259,"offset":2551},"indent":[]}},{"type":"text","value":" so that we can keep track of which item is which. Every time we add an item to our todos, that number gets incremented. The dictionary returned by the method is then added as an item of the list. Now that we’ve made our todolist, lets print it out!","position":{"start":{"line":70,"column":259,"offset":2551},"end":{"line":70,"column":508,"offset":2800},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2293},"end":{"line":70,"column":508,"offset":2800},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to your todolist!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"When you're done entering your todos type 'Done!'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        add_todo <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name a thing you have to do: \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"Done!\"</span> <span class=\"token keyword\">in</span> add_todo<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        todos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>make_todo<span class=\"token punctuation\">(</span>add_todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> todo <span class=\"token keyword\">in</span> todos<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is your {0} todo\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> todo<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The {0} is {1}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_todo</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    due_date <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"When is this due? \"</span><span class=\"token punctuation\">)</span>\n    category <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What category is this? \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"due_date\"</span><span class=\"token punctuation\">:</span> due_date<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"category\"</span><span class=\"token punctuation\">:</span> category<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"item\"</span><span class=\"token punctuation\">:</span> todo<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":73,"column":1,"offset":2803},"end":{"line":104,"column":4,"offset":3595},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In here we get each item in our todolist and print out which number todo it is. We then print out the keys and values for that todo item. If you want to add to this program, try making it so that after the items have been printed, the user can add or delete from this list. The final code for that will be posted at the bottom. ","position":{"start":{"line":105,"column":1,"offset":3596},"end":{"line":105,"column":329,"offset":3924},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":3596},"end":{"line":105,"column":329,"offset":3924},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first step I would take is breaking up the adding and printing parts of the program into methods so we the user can keep asking to use them. ","position":{"start":{"line":107,"column":1,"offset":3926},"end":{"line":107,"column":146,"offset":4071},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3926},"end":{"line":107,"column":146,"offset":4071},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">add_todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"When you're done entering your todos type 'Done!'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        add_todo <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name a thing you have to do: \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"Done!\"</span> <span class=\"token keyword\">in</span> add_todo<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        todos<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>make_todo<span class=\"token punctuation\">(</span>add_todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_todos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> todo <span class=\"token keyword\">in</span> todos<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is your {0} todo\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> todo<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The {0} is {1}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------\"</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":109,"column":1,"offset":4073},"end":{"line":126,"column":4,"offset":4614},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":128,"column":1,"offset":4616},"end":{"line":128,"column":5,"offset":4620},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"add_todo()","position":{"start":{"line":128,"column":7,"offset":4622},"end":{"line":128,"column":17,"offset":4632},"indent":[]}}],"position":{"start":{"line":128,"column":5,"offset":4620},"end":{"line":128,"column":19,"offset":4634},"indent":[]}},{"type":"text","value":" is called at the beggining of our program and then inside of a ","position":{"start":{"line":128,"column":19,"offset":4634},"end":{"line":128,"column":83,"offset":4698},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"while","position":{"start":{"line":128,"column":85,"offset":4700},"end":{"line":128,"column":90,"offset":4705},"indent":[]}}],"position":{"start":{"line":128,"column":83,"offset":4698},"end":{"line":128,"column":92,"offset":4707},"indent":[]}},{"type":"text","value":" loop so we can keep doing it as long as we want. The ","position":{"start":{"line":128,"column":92,"offset":4707},"end":{"line":128,"column":146,"offset":4761},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"print_todos()","position":{"start":{"line":128,"column":148,"offset":4763},"end":{"line":128,"column":161,"offset":4776},"indent":[]}}],"position":{"start":{"line":128,"column":146,"offset":4761},"end":{"line":128,"column":163,"offset":4778},"indent":[]}},{"type":"text","value":" is the same as before, but I added in some lines to make it more visually appealing. ","position":{"start":{"line":128,"column":163,"offset":4778},"end":{"line":128,"column":249,"offset":4864},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":4616},"end":{"line":128,"column":249,"offset":4864},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    to_delete <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which todo have you completed? \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    todos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>to_delete<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":130,"column":1,"offset":4866},"end":{"line":134,"column":4,"offset":4988},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here’s the ","position":{"start":{"line":136,"column":1,"offset":4990},"end":{"line":136,"column":12,"offset":5001},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"remove_todo()","position":{"start":{"line":136,"column":14,"offset":5003},"end":{"line":136,"column":27,"offset":5016},"indent":[]}}],"position":{"start":{"line":136,"column":12,"offset":5001},"end":{"line":136,"column":29,"offset":5018},"indent":[]}},{"type":"text","value":" method which asks the user to remove a todo from their list. The issue with this is that once the todo item is deleted, the rest of the todolist’s numbers in the dictionary dont change. To fix that i made a method: ","position":{"start":{"line":136,"column":29,"offset":5018},"end":{"line":136,"column":245,"offset":5234},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":4990},"end":{"line":136,"column":245,"offset":5234},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">remove_todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    to_delete <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Which todo have you completed? \"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    todos<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>to_delete<span class=\"token punctuation\">)</span>\n    reassign_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">reassign_numbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        todos<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>","position":{"start":{"line":138,"column":1,"offset":5236},"end":{"line":148,"column":4,"offset":5483},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All it does is go through and change the numbers of each todo.","position":{"start":{"line":150,"column":1,"offset":5485},"end":{"line":150,"column":63,"offset":5547},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5485},"end":{"line":150,"column":63,"offset":5547},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally we put all the method calls in a ","position":{"start":{"line":152,"column":1,"offset":5549},"end":{"line":152,"column":42,"offset":5590},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"while","position":{"start":{"line":152,"column":44,"offset":5592},"end":{"line":152,"column":49,"offset":5597},"indent":[]}}],"position":{"start":{"line":152,"column":42,"offset":5590},"end":{"line":152,"column":51,"offset":5599},"indent":[]}},{"type":"text","value":" loop where we ask the user for their input:","position":{"start":{"line":152,"column":51,"offset":5599},"end":{"line":152,"column":95,"offset":5643},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":5549},"end":{"line":152,"column":95,"offset":5643},"indent":[]}},{"type":"html","lang":"python","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to your todolist!\"</span><span class=\"token punctuation\">)</span>\n    add_todo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    print_todos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        choice <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"If you want to add to your list say 'add', if you want to remove things say 'remove', if you want to see your todos say 'print', say anything else to exit \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'add'</span> <span class=\"token keyword\">in</span> choice<span class=\"token punctuation\">:</span>\n            add_todo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token string\">'remove'</span> <span class=\"token keyword\">in</span> choice<span class=\"token punctuation\">:</span>\n            remove_todo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> <span class=\"token string\">'print'</span> <span class=\"token keyword\">in</span> choice<span class=\"token punctuation\">:</span>\n            print_todos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thanks!\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span></code></pre></div>","position":{"start":{"line":154,"column":1,"offset":5645},"end":{"line":171,"column":4,"offset":6188},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That’s it! Very simple all in all, hopefully you feel comfortable with basic python now. My next series is going to be with Swift, it’ll be a more difficult tutorial, going through more advanced concepts, but feel free to take a look! The entire code for this project is posted at the bottom in the ","position":{"start":{"line":173,"column":1,"offset":6190},"end":{"line":173,"column":300,"offset":6489},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"gist","position":{"start":{"line":173,"column":302,"offset":6491},"end":{"line":173,"column":306,"offset":6495},"indent":[]}}],"position":{"start":{"line":173,"column":300,"offset":6489},"end":{"line":173,"column":308,"offset":6497},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":6190},"end":{"line":173,"column":308,"offset":6497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"{% gist c3e7dcd97af0a9e6265c39b5cd04257a %}","position":{"start":{"line":175,"column":1,"offset":6499},"end":{"line":175,"column":44,"offset":6542},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":6499},"end":{"line":175,"column":44,"offset":6542},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":177,"column":1,"offset":6544}}}}