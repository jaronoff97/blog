{"expireTime":9007200815366030000,"key":"transformer-remark-markdown-html-4af44855df032954f986d5e336f6a82b-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h3 id=\"ds-4100-data-collection-integration-and-analysis\"><a href=\"#ds-4100-data-collection-integration-and-analysis\" aria-label=\"ds 4100 data collection integration and analysis permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DS 4100 Data Collection, Integration, and Analysis</h3>\n<p>Today we’re talking a bit about NoSQL databases. These databases can be divided into four generes:</p>\n<ul>\n<li>Key-Value</li>\n<li>Columnar</li>\n<li>Document</li>\n<li>Graph</li>\n</ul>\n<h2 id=\"key-value\"><a href=\"#key-value\" aria-label=\"key value permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key-Value</h2>\n<ul>\n<li>Key-Value (KV) databases such as Redis and Riak are the simplest kind of database in which keys are stored with matching values. </li>\n<li>A KV-DB is essentially a lookup table that often uses hashing to speed up retrieval.</li>\n<li>KV-DBs scale easily and have high performance.</li>\n<li>In fact, a file system could be looked at as a key-value data store where the path is the key and the file content is the value.</li>\n</ul>\n<h2 id=\"columnar\"><a href=\"#columnar\" aria-label=\"columnar permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Columnar</h2>\n<ul>\n<li>Columnar databases, such as HBase, are similar to key-value databases in that they store keys with information. </li>\n<li>However, rather than storing a single value, a columnar database stores multiple pieces of information – similar to a record.</li>\n<li>Unlike a relational database the columns do not have to be of the same data type.</li>\n<li>Unlike relational schemas, column-based stores do not require a pre-structured table. </li>\n<li>Each record is comprised of one or more columns containing the information and each column of each record can be different.</li>\n<li>Columnar databases allow very large and un-structured data to be managed.</li>\n<li>They are generally used when simple key-value pairs are not sufficient and storing many records with large amounts of information is a required.</li>\n</ul>\n<h2 id=\"document\"><a href=\"#document\" aria-label=\"document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Document</h2>\n<ul>\n<li>Document databases such as MongoDB and CouchDB are very similar to columnar databases but allow for much deeper nesting of information.</li>\n<li>They are ideal for structured documents.</li>\n<li>Performance is often an issue with these databases.</li>\n<li>XML Stores are an example of a document database.</li>\n<li>Document databases often use JavaScript as the native query language with data being exchanged between the client and the server using JSON object.</li>\n</ul>\n<h2 id=\"graph\"><a href=\"#graph\" aria-label=\"graph permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Graph</h2>\n<ul>\n<li>Graph databases such as Neo4J use “graphs” with nodes and edges connecting each other through relationships.</li>\n<li>These databases are ideal in situations where “networks” or “deep connection” must be tracked, such as social networks.</li>\n</ul>\n<p>The rest of the class we’re working on our new assignment</p>"}