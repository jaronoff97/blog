{"expireTime":9007200815366029000,"key":"transformer-remark-markdown-html-ef4add3d453eacad0c9dc8f40f89dde6-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>Welcome to Swift! Swift is my favorite programming language right now for a bunch of reasons. If you’re familiar with a statically-typed language like Java, C, or C++, Swift will come as a breath of fresh air. Swift is a statically-typed, type-inferred language. This tutorial is meant for more experienced programmers, you should have a good understanding of either a statically-typed language like Java or a great understanding of a dynamically-typed language like Python. This first tutorial is going to go over the basics of Swift. </p>\n<p>Swift can be compiled and run in a numorous amount of places, there are a lot of web compilers, here are some web examples:</p>\n<ul>\n<li><a href=\"http://swiftstub.com\">http://swiftstub.com</a></li>\n<li><a href=\"http://www.runswiftlang.com\">http://www.runswiftlang.com</a></li>\n<li><a href=\"https://swiftlang.ng.bluemix.net/#/repl\">https://swiftlang.ng.bluemix.net/#/repl</a></li>\n</ul>\n<p>Swift, however, is often used in Xcode. Once you download Xcode, open up a new Playground. </p>\n<h3 id=\"swift-example-code\"><a href=\"#swift-example-code\" aria-label=\"swift example code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift example code</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">//statically typed variable</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span> <span class=\"token comment\">//dynamicly typed variable</span>\n<span class=\"token keyword\">var</span> z<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y <span class=\"token comment\">//Because x is an integer, we have to tell swift to add these numbers as doubles</span>\n\n<span class=\"token keyword\">var</span> 國 <span class=\"token operator\">=</span> <span class=\"token string\">\"美國\"</span><span class=\"token comment\">//We can use characters and emojis as variable names</span>\n\n<span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"Jacob Aronoff\"</span><span class=\"token comment\">//let means the variable is immutable or final</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Print is just like in python</span>\n\n<span class=\"token keyword\">let</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Corey\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">]</span><span class=\"token comment\">//Swift array</span>\n<span class=\"token comment\">//let students: [String] = [\"Jacob\",\"Sam\",\"Corey\",\"Michael\"]//Without type inference</span>\n\n<span class=\"token keyword\">if</span> students<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">//.isEmpty is a property of the collection type</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are no students!\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>students<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span> students\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//So is .count</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> grades <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sam\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Corey\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token comment\">//A dictionary of type [String:Int]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> grades<span class=\"token punctuation\">{</span><span class=\"token comment\">//We're making a tuple equal to each (key, value) pair in the dictionary</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span> has a <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>grade<span class=\"token delimiter variable\">)</span></span> in class\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//Swift will no longer support C-style for loops (for(int i=0; i&lt;10;i++)) in Swift 3</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">print_something</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//takes one parameter</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token comment\">//print the parameter</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print_something</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WOW!\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//call the function</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">return_something</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">last</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">String</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//Takes two parameters, one named first, the other named last</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token builtin\">first</span><span class=\"token delimiter variable\">)</span></span> <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token builtin\">last</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token comment\">//return the concatenation of the two strings</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">return_something</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">last</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Aronoff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//We can call the function with the named parameters</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> power<span class=\"token punctuation\">:</span><span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//default param</span>\n  <span class=\"token keyword\">var</span> answer<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">for</span> <span class=\"token number\">_</span> <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>power <span class=\"token punctuation\">{</span>\n    answer <span class=\"token operator\">*</span><span class=\"token operator\">=</span> base\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> answer\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>power<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Okay well that’s enough for now, next time we’ll go over different kinds of datastructures, classes, and some more swifty behavior.</p>\n<p>{% gist f8f64e9abbfd0197ee5690974e7cf86f %}</p>"}