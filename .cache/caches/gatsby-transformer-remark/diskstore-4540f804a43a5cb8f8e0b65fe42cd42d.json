{"expireTime":9007200815364657000,"key":"transformer-remark-markdown-ast-b3fd66bee72b9542a734502841ba5335-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"link","url":"#object-oriented-design","title":null,"data":{"hProperties":{"aria-label":"object oriented design permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Object Oriented Design","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":27,"offset":27},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":27,"offset":27},"indent":[]},"data":{"id":"object-oriented-design","htmlAttributes":{"id":"object-oriented-design"},"hProperties":{"id":"object-oriented-design"}}},{"type":"paragraph","children":[{"type":"text","value":"Today we’re talking about mocks. Mocks are components that can replace an actual componeny. They are very useful for testing purposes. We call these components ‘stubs’.","position":{"start":{"line":4,"column":1,"offset":29},"end":{"line":4,"column":169,"offset":197},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":29},"end":{"line":4,"column":169,"offset":197},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now back to the rest of the lecture: ","position":{"start":{"line":6,"column":1,"offset":199},"end":{"line":6,"column":38,"offset":236},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":199},"end":{"line":6,"column":38,"offset":236},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’re talking about encapsulation, specifically in the context of connect N:","position":{"start":{"line":8,"column":1,"offset":238},"end":{"line":8,"column":77,"offset":314},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":238},"end":{"line":8,"column":77,"offset":314},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When we’re using multiple dimensions, it’s easiest to use a map:","position":{"start":{"line":10,"column":1,"offset":316},"end":{"line":10,"column":65,"offset":380},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":316},"end":{"line":10,"column":65,"offset":380},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> configuration<span class=\"token punctuation\">;</span>\n\n\n\n\n<span class=\"token class-name\">Status</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> turn<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Object</span> hypercolumns<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":12,"column":1,"offset":382},"end":{"line":22,"column":4,"offset":484},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But what about status? To add it into our generalization, we simply change ","position":{"start":{"line":24,"column":1,"offset":486},"end":{"line":24,"column":76,"offset":561},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Integer","position":{"start":{"line":24,"column":78,"offset":563},"end":{"line":24,"column":85,"offset":570},"indent":[]}}],"position":{"start":{"line":24,"column":76,"offset":561},"end":{"line":24,"column":87,"offset":572},"indent":[]}},{"type":"text","value":" to ","position":{"start":{"line":24,"column":87,"offset":572},"end":{"line":24,"column":91,"offset":576},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Object","position":{"start":{"line":24,"column":93,"offset":578},"end":{"line":24,"column":99,"offset":584},"indent":[]}}],"position":{"start":{"line":24,"column":91,"offset":576},"end":{"line":24,"column":101,"offset":586},"indent":[]}},{"type":"text","value":". If we keep abstracting, we get:","position":{"start":{"line":24,"column":101,"offset":586},"end":{"line":24,"column":134,"offset":619},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":486},"end":{"line":24,"column":134,"offset":619},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> properties<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":26,"column":1,"offset":621},"end":{"line":28,"column":4,"offset":665},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"By doing so, we lost meaning and intent. We gained flexibility though! aWe also basically threw out the type system. If we bring back everything:","position":{"start":{"line":30,"column":1,"offset":667},"end":{"line":30,"column":146,"offset":812},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":667},"end":{"line":30,"column":146,"offset":812},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> goal<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> players<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Status</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> turn<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> columns<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":32,"column":1,"offset":814},"end":{"line":42,"column":4,"offset":928},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"What’s bad?","position":{"start":{"line":45,"column":1,"offset":931},"end":{"line":45,"column":12,"offset":942},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":931},"end":{"line":45,"column":12,"offset":942},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"width or height or goal or players might change mid-game","position":{"start":{"line":47,"column":3,"offset":946},"end":{"line":47,"column":59,"offset":1002},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":946},"end":{"line":47,"column":59,"offset":1002},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":944},"end":{"line":47,"column":59,"offset":1002},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"status or columns might be null","position":{"start":{"line":48,"column":3,"offset":1005},"end":{"line":48,"column":34,"offset":1036},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":1005},"end":{"line":48,"column":34,"offset":1036},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1003},"end":{"line":48,"column":34,"offset":1036},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"width or height or goal or players might be zero or negative","position":{"start":{"line":49,"column":3,"offset":1039},"end":{"line":49,"column":63,"offset":1099},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":1039},"end":{"line":49,"column":63,"offset":1099},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1037},"end":{"line":49,"column":63,"offset":1099},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the shape of the list-of-lists in columns might not match the dimensions in width and height","position":{"start":{"line":50,"column":3,"offset":1102},"end":{"line":50,"column":95,"offset":1194},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":1102},"end":{"line":50,"column":95,"offset":1194},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1100},"end":{"line":50,"column":95,"offset":1194},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"or it might contain Integers that don’t stand for actual players","position":{"start":{"line":51,"column":3,"offset":1197},"end":{"line":51,"column":67,"offset":1261},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":1197},"end":{"line":51,"column":67,"offset":1261},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1195},"end":{"line":51,"column":67,"offset":1261},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"and the client can look at or change whatever it pleases","position":{"start":{"line":52,"column":3,"offset":1264},"end":{"line":52,"column":59,"offset":1320},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":1264},"end":{"line":52,"column":59,"offset":1320},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1262},"end":{"line":52,"column":59,"offset":1320},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":944},"end":{"line":52,"column":59,"offset":1320},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To fix this, use final as much as possible! Ensure correct initialization! Also use the proper access level modifiers:","position":{"start":{"line":55,"column":1,"offset":1323},"end":{"line":55,"column":119,"offset":1441},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1323},"end":{"line":55,"column":119,"offset":1441},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Modifier\tScope","position":{"start":{"line":57,"column":1,"offset":1443},"end":{"line":57,"column":15,"offset":1457},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1443},"end":{"line":57,"column":15,"offset":1457},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"private","position":{"start":{"line":59,"column":3,"offset":1461},"end":{"line":59,"column":10,"offset":1468},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1459},"end":{"line":59,"column":12,"offset":1470},"indent":[]}},{"type":"text","value":"\tsame class only","position":{"start":{"line":59,"column":12,"offset":1470},"end":{"line":59,"column":28,"offset":1486},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1459},"end":{"line":59,"column":28,"offset":1486},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"default","position":{"start":{"line":61,"column":3,"offset":1490},"end":{"line":61,"column":10,"offset":1497},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1488},"end":{"line":61,"column":12,"offset":1499},"indent":[]}},{"type":"text","value":"\t…and everything else in the package","position":{"start":{"line":61,"column":12,"offset":1499},"end":{"line":61,"column":50,"offset":1537},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1488},"end":{"line":61,"column":50,"offset":1537},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"protected","position":{"start":{"line":63,"column":3,"offset":1541},"end":{"line":63,"column":12,"offset":1550},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1539},"end":{"line":63,"column":14,"offset":1552},"indent":[]}},{"type":"text","value":"\t…and subclasses","position":{"start":{"line":63,"column":14,"offset":1552},"end":{"line":63,"column":32,"offset":1570},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1539},"end":{"line":63,"column":32,"offset":1570},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"public","position":{"start":{"line":65,"column":3,"offset":1574},"end":{"line":65,"column":9,"offset":1580},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1572},"end":{"line":65,"column":11,"offset":1582},"indent":[]}},{"type":"text","value":"\t…and the rest of the world","position":{"start":{"line":65,"column":11,"offset":1582},"end":{"line":65,"column":40,"offset":1611},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1572},"end":{"line":65,"column":40,"offset":1611},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#invariance","title":null,"data":{"hProperties":{"aria-label":"invariance permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Invariance","position":{"start":{"line":67,"column":4,"offset":1616},"end":{"line":67,"column":14,"offset":1626},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1613},"end":{"line":67,"column":14,"offset":1626},"indent":[]},"data":{"id":"invariance","htmlAttributes":{"id":"invariance"},"hProperties":{"id":"invariance"}}},{"type":"paragraph","children":[{"type":"text","value":"Preserving the “validity” of an object\nDon’t let outsiders access it\nIf possible make it final so that once valid, always valid\nWhat about mutable objects?","position":{"start":{"line":69,"column":1,"offset":1628},"end":{"line":72,"column":28,"offset":1783},"indent":[1,1,1]}}],"position":{"start":{"line":69,"column":1,"offset":1628},"end":{"line":72,"column":28,"offset":1783},"indent":[1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Even</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Even</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value must be even\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":74,"column":1,"offset":1785},"end":{"line":89,"column":4,"offset":2042},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An invariant is:","position":{"start":{"line":91,"column":1,"offset":2044},"end":{"line":91,"column":17,"offset":2060},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2044},"end":{"line":91,"column":17,"offset":2060},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"a ","position":{"start":{"line":93,"column":1,"offset":2062},"end":{"line":93,"column":3,"offset":2064},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"logical statement","position":{"start":{"line":93,"column":5,"offset":2066},"end":{"line":93,"column":22,"offset":2083},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":2064},"end":{"line":93,"column":24,"offset":2085},"indent":[]}},{"type":"text","value":" about the ","position":{"start":{"line":93,"column":24,"offset":2085},"end":{"line":93,"column":35,"offset":2096},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"instantaneous state","position":{"start":{"line":93,"column":37,"offset":2098},"end":{"line":93,"column":56,"offset":2117},"indent":[]}}],"position":{"start":{"line":93,"column":35,"offset":2096},"end":{"line":93,"column":58,"offset":2119},"indent":[]}},{"type":"text","value":" of an object that is ","position":{"start":{"line":93,"column":58,"offset":2119},"end":{"line":93,"column":80,"offset":2141},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"ensured by the constructors and preserved by the methods","position":{"start":{"line":93,"column":82,"offset":2143},"end":{"line":93,"column":138,"offset":2199},"indent":[]}}],"position":{"start":{"line":93,"column":80,"offset":2141},"end":{"line":93,"column":140,"offset":2201},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":93,"column":140,"offset":2201},"end":{"line":93,"column":141,"offset":2202},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2062},"end":{"line":93,"column":141,"offset":2202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If these are met, it’s an invariant:","position":{"start":{"line":95,"column":1,"offset":2204},"end":{"line":95,"column":37,"offset":2240},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2204},"end":{"line":95,"column":37,"offset":2240},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"logical statement: a claim that is true or false","position":{"start":{"line":97,"column":3,"offset":2244},"end":{"line":97,"column":51,"offset":2292},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":2244},"end":{"line":97,"column":51,"offset":2292},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2242},"end":{"line":97,"column":51,"offset":2292},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the instantaneous state of an object: meaning the values in its fields at a point in time","position":{"start":{"line":98,"column":3,"offset":2295},"end":{"line":98,"column":92,"offset":2384},"indent":[]}}],"position":{"start":{"line":98,"column":3,"offset":2295},"end":{"line":98,"column":92,"offset":2384},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2293},"end":{"line":98,"column":92,"offset":2384},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ensured by the constructors: when a constructor finishes normally then the claim is true","position":{"start":{"line":99,"column":3,"offset":2387},"end":{"line":99,"column":91,"offset":2475},"indent":[]}}],"position":{"start":{"line":99,"column":3,"offset":2387},"end":{"line":99,"column":91,"offset":2475},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":2385},"end":{"line":99,"column":91,"offset":2475},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"preserved by the methods: if the claim is true before a method is called then it is true afterward","position":{"start":{"line":100,"column":3,"offset":2478},"end":{"line":100,"column":101,"offset":2576},"indent":[]}}],"position":{"start":{"line":100,"column":3,"offset":2478},"end":{"line":100,"column":101,"offset":2576},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2476},"end":{"line":100,"column":101,"offset":2576},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2242},"end":{"line":100,"column":101,"offset":2576},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Examples of invariants:","position":{"start":{"line":102,"column":1,"offset":2578},"end":{"line":102,"column":24,"offset":2601},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":2578},"end":{"line":102,"column":24,"offset":2601},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// INVARIANT (1): width is not null</span>\n<span class=\"token comment\">// INVARIANT (2): width > 0</span>\n<span class=\"token comment\">// INVARIANT (3): width > height</span>\n<span class=\"token comment\">// INVARIANT (4): width never changes</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> turn<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// INVARIANT (5): turn only increases</span>\n<span class=\"token comment\">// INVARIANT (6): turn > 0</span>\n<span class=\"token comment\">// INVARIANT (7): turn &lt; players</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> columns<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// INVARIANT (1): columns != null</span>\n<span class=\"token comment\">// INVARIANT (2): columns.size() == width</span>\n<span class=\"token comment\">// INVARIANT (3): columns.get(col) != null if 0 &lt;= col &lt; width</span>\n<span class=\"token comment\">// INVARIANT (4): every column in columns has size &lt;= height</span>\n<span class=\"token comment\">// INVARIANT (5): every Integer in columns is a valid player</span>\n<span class=\"token comment\">//                in (0, players]</span>\n<span class=\"token comment\">// NOT AN INVARIANT: columns</span>\n<span class=\"token comment\">// NOT AN INVARIANT: columns agrees with width</span>\n<span class=\"token comment\">// NOT AN INVARIANT: columns always refers to the same list</span>\n<span class=\"token comment\">// INVARIANT BUT VACUOUS: columns is a list</span></code></pre></div>","position":{"start":{"line":104,"column":1,"offset":2603},"end":{"line":125,"column":4,"offset":3403},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":150,"column":1,"offset":3429}}}}