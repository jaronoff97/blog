{"expireTime":9007200815364656000,"key":"transformer-remark-markdown-html-78ac772efe703fae86fcac7693234233-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h3 id=\"ds-4100-data-collection-integration-and-analysis\"><a href=\"#ds-4100-data-collection-integration-and-analysis\" aria-label=\"ds 4100 data collection integration and analysis permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DS 4100 Data Collection, Integration, and Analysis</h3>\n<p>Like my OOD posts, I wasn’t here in class for day 4, so I’m skipping right to day 5. Today/ this week we’re doing data importing from multiple sources as well as scraping. We started by importing CSVs and txt files. Now we’re going to import from other normal files, JSON, and XML. Eventually we’re going to be getting data from databases.</p>\n<h3 id=\"packages\"><a href=\"#packages\" aria-label=\"packages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Packages</h3>\n<p>Packages are collections of R functions, data, and compield code in a well-defined format. It’s important where packages are stored.</p>\n<p>Functions to use with packages:</p>\n<ul>\n<li><strong>.libPaths()</strong></li>\n<li><strong>library()</strong> to list all installed packages</li>\n<li><strong>search()</strong> to list currently loaded packages</li>\n<li><strong>require()</strong> to load a package for use</li>\n</ul>\n<p>Use <strong>install.packages()</strong> to install a package</p>\n<p>We can load most file formats:</p>\n<ul>\n<li>.csv</li>\n<li>.txt</li>\n<li>.xls</li>\n<li>.xlsx</li>\n<li>.RData</li>\n</ul>\n<p>Package called “foreign” that allows R to load data from stata, SPSS, SAS, MATLAB, etc. Data is located in folders, so be sure a working directory is set.</p>\n<h3 id=\"data\"><a href=\"#data\" aria-label=\"data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data</h3>\n<p>use <strong>file.exists</strong> to see if a file exists, use <strong>dir.create</strong> to create a directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">download.file<span class=\"token punctuation\">(</span><span class=\"token string\">\"FILEURL\"</span><span class=\"token punctuation\">,</span> destfile<span class=\"token operator\">=</span><span class=\"token string\">\"DESTINATION_PATH\"</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"curl\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When a file is loaded its content are stored in the computer’s RAM, R is default 32 bit, so you need to specify 64bit to hold more data. When “big data” needs to be analyzed use a database! Files can also take a long time to load. </p>\n<p>CSV doesn’t have a standard file format so you have to be careful when your read from a CSV. If there are double quotes surrounding a string in a CSV R will take them as the literal value. You can actually specify the seperator in <strong>read.csv</strong> which is kind of ironic cause it’s COMMA SEPERATED VALUES. There’s also read.table which read.csv is basically a wrapper around.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span>xlsx<span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">&lt;-</span> read.xlsx<span class=\"token punctuation\">(</span><span class=\"token string\">\"some.xlsx\"</span><span class=\"token punctuation\">,</span> sheetIndex<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It’s best to use CSV, because XLS and XLSX are proprietary. Saving R objects in .RData files is fast and convenient but is not compatible AT ALL with other programs. </p>\n<h3 id=\"xml\"><a href=\"#xml\" aria-label=\"xml permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML</h3>\n<p>XML stands for Extensible Markup Language. It was designed to describe data in a human readable format that is simple to parse. It’s purpose is as a software and hardware independent encoding format for carrying information. The data is described within XML in the form of a tree. Excel, Word, Powerpoint all use XML. For each open tag in XML, a tag most have a closing tag. It’s often up to the programmer how to encode data in XML. </p>\n<p>To do CRUD operations on XML you use the aptly named “XML” package in R. </p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token operator\">></span> xmlobj <span class=\"token operator\">&lt;-</span> xmlParse<span class=\"token punctuation\">(</span><span class=\"token string\">\"pubmed_sample.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> xmldf <span class=\"token operator\">&lt;-</span> xmlToDataFrame<span class=\"token punctuation\">(</span><span class=\"token string\">\"pubmed_sample.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> url <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"http://www.statistics.life.ku.dk/primer/mydata.xml\"</span>\n<span class=\"token operator\">></span> data <span class=\"token operator\">&lt;-</span> xmlToDataFrame<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> head<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  Girth Height Volume\n<span class=\"token number\">1</span>   <span class=\"token number\">8.3</span>     <span class=\"token number\">70</span>   <span class=\"token number\">10.3</span>\n<span class=\"token number\">2</span>   <span class=\"token number\">8.6</span>     <span class=\"token number\">65</span>   <span class=\"token number\">10.3</span>\n<span class=\"token number\">3</span>   <span class=\"token number\">8.8</span>     <span class=\"token number\">63</span>   <span class=\"token number\">10.2</span>\n<span class=\"token number\">4</span>  <span class=\"token number\">10.5</span>     <span class=\"token number\">72</span>   <span class=\"token number\">16.4</span>\n<span class=\"token number\">5</span>  <span class=\"token number\">10.7</span>     <span class=\"token number\">81</span>   <span class=\"token number\">18.8</span>\n<span class=\"token number\">6</span>  <span class=\"token number\">10.8</span>     <span class=\"token number\">83</span>   <span class=\"token number\">19.7</span></code></pre></div>\n<p>Parsing through XML is PRETTY UGLY, it’s a whole mess of square brackets thrown together inside of functions which are poorly named, they’re so incredibely ugly I’m not even going to put it here. My teacher says it’s fast, but because it’s all positional, it’s not near as safe!</p>"}