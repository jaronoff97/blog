{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017-01-17-CS-3500-Day-3/","webpackCompilationHash":"bfab4e6a7e3f8097a2ef","result":{"data":{"markdownRemark":{"id":"04e820b3-c05c-55d5-acf4-1f17ba36f294","html":"<h3 id=\"object-oriented-design\"><a href=\"#object-oriented-design\" aria-label=\"object oriented design permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Oriented Design</h3>\n<p>We’re back to talking about durations, and how we can make our own classes that we use basic operations on. </p>\n<p>We want to be able to:</p>\n<ul>\n<li>Compare</li>\n<li>Add</li>\n<li>Subtract</li>\n<li>Check Equality</li>\n</ul>\n<p>We’re going to be talking about <strong>hashCode()</strong> and <strong>equals(Object other)</strong></p>\n<p>The comparable interface enforces <strong>compareTo</strong>, <strong>equals</strong>, and <strong>hashCode</strong>. The abstract class we’ll design for <strong>Duration</strong> needs to have a conversion to seconds, a conversion to Hms (hours, minutes, seconds), and a way to add two durations to each other. To ensure immutability for our variables, use the <strong>final</strong> keyword. Now we’re talking about proper case analysis in a constructor: how to be sure that the data you’re getting in your constructor matches your invariants.</p>\n<p>It’s important to use try’s and catch’s to make sure the parameters are correct. The try block can be used when you want to test for parameters. Now we’re getting into equality. Equality needs some basic things to be satisfied:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> that<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> that<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>that <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">)</span> that<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, we check if this is equal to that. Then we check if that is a duration, so we can short circuit. If it gets past all of those tests, we then check if our seconds is equal to the other objects seconds. If we don’t have that last line, the java compiler will almost always say two things aren’t equal becaues it compares memory addresses. </p>\n<p>That’s it! Basically just more of the same towards the end of class. I’m not going to be in class for day 4, so I’m just going to make a post that day about whatever the lecture notes are on.</p>","fields":{"slug":"/posts/2017-01-17-CS-3500-Day-3/","tagSlugs":["/tag/ood/","/tag/java/","/tag/notes/"]},"frontmatter":{"date":"2017-01-17T00:00:00.000Z","description":"Object Oriented Design","tags":["OOD","java","notes"],"title":"CS 3500 Day 3"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2017-01-17-CS-3500-Day-3/"}}}