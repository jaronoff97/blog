{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017-02-14-CS-3500-Day-11/","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"id":"af58a6c0-7886-5bf8-acd7-d8f8d6cd2d06","html":"<h3 id=\"object-oriented-design\"><a href=\"#object-oriented-design\" aria-label=\"object oriented design permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Oriented Design</h3>\n<p>Today we’re talking more about invariance. We’re going to talk about invariance in terms of heaps.</p>\n<p>We’re also implementing “Turtle Graphics”:</p>\n<p>Basically a turtle has a position and a direction on the screen. It can only walk in the direction it’s facing. It can change it’s direction by turning in place. The turtle can save it’s state, and return to its state.</p>\n<p>A Turtle may need:</p>\n<ul>\n<li>A direction</li>\n<li>A distance for moving</li>\n<li>State</li>\n<li>Position of Turtle</li>\n<li>A canvas for drawing</li>\n<li>List of all saved states</li>\n</ul>\n<p>Operations:</p>\n<ul>\n<li>Walk/ Move</li>\n<li>Turn</li>\n<li>Save current pos</li>\n<li>Retrieve last saved state</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TurtleOperations</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> units<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">turn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> degrees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There’s a big debate about how to do the turn method. Whether we should degrees, an enum, multiple methods, etc. Now onto implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Turtle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TurtleOperations</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We got into a huge talk about implementation of direction, and how there are literally an infinite amount of ways to do it properly. To complete this, we use SOLID principles so that:</p>\n<div class=\"gatsby-highlight\" data-language=\"ascii\"><pre class=\"language-ascii\"><code class=\"language-ascii\">+---------------------------+          +-----------------------------+\n|                           |          |                             |\n|                           |          |                             |\n|        Interface          |          |          Interface          |\n|                           |          |                             |\n|    TurtleOperations       &lt;----------+     TracingTurtleOps        |\n|                           |          |                             |\n|                           |          |                             |\n|                           |          |                             |\n+------------^--------------+          +----------------^------------+\n             |                                          |\n             |                                          |\n             |                                          |\n+---------------------------+          +-----------------------------+\n|                           |          |                             |\n|                           |          |                             |\n|                           |          |                             |\n|                           |          |          TracingTurtle      |\n|      Turtle               &lt;----------+                             |\n|                           |          |                             |\n|                           |          |                             |\n|                           |          |                             |\n+---------------------------+          +-----------------------------+</code></pre></div>","fields":{"slug":"/posts/2017-02-14-CS-3500-Day-11/","tagSlugs":["/tag/ood/","/tag/java/","/tag/notes/"]},"frontmatter":{"date":"2017-02-14T00:00:00.000Z","description":"Object Oriented Design","tags":["OOD","java","notes"],"title":"CS 3500 Day 11"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2017-02-14-CS-3500-Day-11/"}}}