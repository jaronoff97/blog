{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2017-02-10-CS-3500-Day-10/","webpackCompilationHash":"bfab4e6a7e3f8097a2ef","result":{"data":{"markdownRemark":{"id":"4cf2d3b5-b75c-5089-85e7-5f4889651a59","html":"<h3 id=\"object-oriented-design\"><a href=\"#object-oriented-design\" aria-label=\"object oriented design permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Oriented Design</h3>\n<p>Today we’re talking about mocks. Mocks are components that can replace an actual componeny. They are very useful for testing purposes. We call these components ‘stubs’.</p>\n<p>Now back to the rest of the lecture: </p>\n<p>We’re talking about encapsulation, specifically in the context of connect N:</p>\n<p>When we’re using multiple dimensions, it’s easiest to use a map:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> configuration<span class=\"token punctuation\">;</span>\n\n\n\n\n<span class=\"token class-name\">Status</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> turn<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Object</span> hypercolumns<span class=\"token punctuation\">;</span></code></pre></div>\n<p>But what about status? To add it into our generalization, we simply change <strong>Integer</strong> to <strong>Object</strong>. If we keep abstracting, we get:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> properties<span class=\"token punctuation\">;</span></code></pre></div>\n<p>By doing so, we lost meaning and intent. We gained flexibility though! aWe also basically threw out the type system. If we bring back everything:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> goal<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> players<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Status</span> status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> turn<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> columns<span class=\"token punctuation\">;</span></code></pre></div>\n<p>What’s bad?</p>\n<ul>\n<li>width or height or goal or players might change mid-game</li>\n<li>status or columns might be null</li>\n<li>width or height or goal or players might be zero or negative</li>\n<li>the shape of the list-of-lists in columns might not match the dimensions in width and height</li>\n<li>or it might contain Integers that don’t stand for actual players</li>\n<li>and the client can look at or change whatever it pleases</li>\n</ul>\n<p>To fix this, use final as much as possible! Ensure correct initialization! Also use the proper access level modifiers:</p>\n<p>Modifier\tScope</p>\n<p><strong>private</strong>\tsame class only</p>\n<p><strong>default</strong>\t…and everything else in the package</p>\n<p><strong>protected</strong>\t…and subclasses</p>\n<p><strong>public</strong>\t…and the rest of the world</p>\n<h2 id=\"invariance\"><a href=\"#invariance\" aria-label=\"invariance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Invariance</h2>\n<p>Preserving the “validity” of an object\nDon’t let outsiders access it\nIf possible make it final so that once valid, always valid\nWhat about mutable objects?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Even</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Even</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value must be even\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An invariant is:</p>\n<p>a <strong>logical statement</strong> about the <strong>instantaneous state</strong> of an object that is <strong>ensured by the constructors and preserved by the methods</strong>.</p>\n<p>If these are met, it’s an invariant:</p>\n<ul>\n<li>logical statement: a claim that is true or false</li>\n<li>the instantaneous state of an object: meaning the values in its fields at a point in time</li>\n<li>ensured by the constructors: when a constructor finishes normally then the claim is true</li>\n<li>preserved by the methods: if the claim is true before a method is called then it is true afterward</li>\n</ul>\n<p>Examples of invariants:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// INVARIANT (1): width is not null</span>\n<span class=\"token comment\">// INVARIANT (2): width > 0</span>\n<span class=\"token comment\">// INVARIANT (3): width > height</span>\n<span class=\"token comment\">// INVARIANT (4): width never changes</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> turn<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// INVARIANT (5): turn only increases</span>\n<span class=\"token comment\">// INVARIANT (6): turn > 0</span>\n<span class=\"token comment\">// INVARIANT (7): turn &lt; players</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> columns<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// INVARIANT (1): columns != null</span>\n<span class=\"token comment\">// INVARIANT (2): columns.size() == width</span>\n<span class=\"token comment\">// INVARIANT (3): columns.get(col) != null if 0 &lt;= col &lt; width</span>\n<span class=\"token comment\">// INVARIANT (4): every column in columns has size &lt;= height</span>\n<span class=\"token comment\">// INVARIANT (5): every Integer in columns is a valid player</span>\n<span class=\"token comment\">//                in (0, players]</span>\n<span class=\"token comment\">// NOT AN INVARIANT: columns</span>\n<span class=\"token comment\">// NOT AN INVARIANT: columns agrees with width</span>\n<span class=\"token comment\">// NOT AN INVARIANT: columns always refers to the same list</span>\n<span class=\"token comment\">// INVARIANT BUT VACUOUS: columns is a list</span></code></pre></div>","fields":{"slug":"/posts/2017-02-10-CS-3500-Day-10/","tagSlugs":["/tag/ood/","/tag/java/","/tag/notes/"]},"frontmatter":{"date":"2017-02-10T00:00:00.000Z","description":"Object Oriented Design","tags":["OOD","java","notes"],"title":"CS 3500 Day 10"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2017-02-10-CS-3500-Day-10/"}}}