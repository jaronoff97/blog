<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift on Blog</title><link>https://jaronoff97.github.io/tags/swift/</link><description>Recent content in swift on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Aug 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jaronoff97.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Firebase and Swift</title><link>https://jaronoff97.github.io/archives/2017-08-22-firebase-and-swift/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-08-22-firebase-and-swift/</guid><description>Hello! Per request of a friendly reddit user, I&amp;rsquo;m going to be doing a quick tutorial on using firebase with swift and how to structure your data models. Before we do anything, just a quick disclaimer, this tutorial is in swift 3, which, even though my life would be made much easier had I used swift 4 (google codeable swift 4), is the current default.
Basic project setup:
Single page application default in XCode Cocoapods to install Firebase You&amp;rsquo;ll be able to find the project&amp;rsquo;s link at the end of this guide.</description></item><item><title>Part 4, Optionals, Extensions, and Protocols</title><link>https://jaronoff97.github.io/archives/2016-05-19-optionals-extensions-protocols/</link><pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-19-optionals-extensions-protocols/</guid><description>Now that we&amp;rsquo;ve gotten over the hurdle of closures we can learn the last three things we need to know before we start iOS programming. Let&amp;rsquo;s start with Optionals.
Let&amp;rsquo;s make a class with a couple properties
class Person { var name: String var age: Int var street: String init(name: String, age: Int) { self.name = name self.age = age } } let jacob = Person(name: &amp;#34;Jacob&amp;#34;, age: 18) print(jacob) When you run this code, you&amp;rsquo;ll get two errors:</description></item><item><title>ARkit Part 1</title><link>https://jaronoff97.github.io/archives/2017-06-27-arkit-part-1/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-06-27-arkit-part-1/</guid><description>Today I&amp;rsquo;m beggining my series on ARKit, and I&amp;rsquo;m going to be working on a basic ARKit app, that&amp;rsquo;s going to involve some basic physics, and 3d modeling (two things I&amp;rsquo;m really terrible at.)
To start, I had to download iOS 11 on my devices and then I had to install the Xcode 9 beta which includes an easy starter for ARKit apps.
After starting up the simulator I realized that running the simulator would not work because it doesn&amp;rsquo;t have access to the camera.</description></item><item><title>Part 2, Swifty Stuff</title><link>https://jaronoff97.github.io/archives/2016-05-18-swifty-stuff/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-18-swifty-stuff/</guid><description>Welcome back to another glorious day of Swift! Today we&amp;rsquo;re going to learn about differnt data structures to make efficient and effective Object Oriented(OO) Code. The first one we&amp;rsquo;ll go over is the classic OO design: the class.
class Student { var name: String var age: Int var grade: String static let uniform_needed = false private var _homework: [String] = [] public var homework:[String]{ get { return _homework } } init(name:String, age:Int, grade:String) { self.</description></item><item><title>Part 3, Cool, Difficult Swift</title><link>https://jaronoff97.github.io/archives/2016-05-18-cool-difficult-swift/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-18-cool-difficult-swift/</guid><description>Today is gonna be our toughest day yet, but by the end of it, you&amp;rsquo;re gonna know everything you have to about Swift.
Lets look back to our Student and Homework classes:
enum Subject { case English case Programming case Language case Science case History } struct Homework { var subject: Subject var due_date: String var name: String } class Student { var name: String var age: Int var grade: String static let uniform_needed = false private var _homework: [Homework] = [] public var homework:[Homework]{ get { return _homework } } init(name:String, age:Int, grade:String) { self.</description></item><item><title>Part 1, Welcome to Swift</title><link>https://jaronoff97.github.io/archives/2016-05-17-welcome-to-swift/</link><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-17-welcome-to-swift/</guid><description>Welcome to Swift! Swift is my favorite programming language right now for a bunch of reasons. If you&amp;rsquo;re familiar with a statically-typed language like Java, C, or C++, Swift will come as a breath of fresh air. Swift is a statically-typed, type-inferred language. This tutorial is meant for more experienced programmers, you should have a good understanding of either a statically-typed language like Java or a great understanding of a dynamically-typed language like Python.</description></item></channel></rss>