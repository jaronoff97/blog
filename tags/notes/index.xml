<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>notes on Blog</title><link>https://jaronoff97.github.io/tags/notes/</link><description>Recent content in notes on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 04 Apr 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jaronoff97.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>CS 3500 Day 21</title><link>https://jaronoff97.github.io/archives/2017-04-04-cs-3500-day-21/</link><pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-04-cs-3500-day-21/</guid><description>Object Oriented Design Today we&amp;rsquo;re going over javascript, ugh gross. But here we go.
&amp;gt; null &amp;gt;= 0 true &amp;gt; null &amp;lt;= 0 true &amp;gt; null == 0 false &amp;gt; null == undefined true &amp;gt; null &amp;gt;= undefined false &amp;gt; undefined &amp;gt;= 0 false &amp;gt; undefined &amp;lt;= 0 false &amp;gt; undefined == 0 false &amp;gt; null &amp;gt;= undefined false &amp;gt; 100/0 Infinity &amp;gt; Infinity == undefined false &amp;gt; undefined &amp;gt;= Infinity false &amp;gt; undefined &amp;lt;= Infinity false &amp;gt; null &amp;lt;= Infinity true &amp;gt; null &amp;gt;= Infinity false &amp;gt; NaN == null false &amp;gt; NaN &amp;gt;= null false &amp;gt; NaN &amp;lt;= null false &amp;gt; &amp;#34;1&amp;#34;==null false Some more stupid stuff</description></item><item><title>DS 4100 Day 21</title><link>https://jaronoff97.github.io/archives/2017-04-04-ds-4100-day-21/</link><pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-04-ds-4100-day-21/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re doing coding walkthroughs, nothing too exciting.</description></item><item><title>CS 3500 Day 18</title><link>https://jaronoff97.github.io/archives/2017-03-24-cs-3500-day-18/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-24-cs-3500-day-18/</guid><description>Object Oriented Design Today we&amp;rsquo;re going over the strategy pattern.
class Coord { int row; int col } interface TicTacToeStrategy { Coord chooseMove(TicTacToeModel model, Piece forWhom); } class AnyOpenSquare implements TicTacToeStrategy { public Coord chooseMove(TicTacToeModel model, Piece forWhom) { for (int r = 0; r &amp;lt; 3; r++) for (int c = 0; c &amp;lt; 3; c++) if (model.getPieceAt(r, c) == null) return new Coord(r, c); return null; } } class AnyOpenCorner implements TicTacToeStrategy { public Coord chooseMove(TicTacToeModel model, Piece forWhom) { if (model.</description></item><item><title>CS 3500 Day 17</title><link>https://jaronoff97.github.io/archives/2017-03-21-cs-3500-day-17/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-21-cs-3500-day-17/</guid><description>Today we&amp;rsquo;re going over the decorator pattern. It&amp;rsquo;s used to add new functionality to existing classes.
package com.jaronoff.decorators; public interface Burrito { public String makeBurrito(); } package com.jaronoff.decorators; public class SimpleBurrito implements Burrito { @Override public String makeBurrito() { return &amp;#34;Base Burrito&amp;#34;; } } package com.jaronoff.decorators; abstract class BurritoDecorator implements Burrito { protected Burrito specialBurrito; public BurritoDecorator(Burrito specialBurrito) { this.specialBurrito = specialBurrito; } public String makeBurrito() { return specialBurrito.makeBurrito(); } } package com.</description></item><item><title>DS 4100 Day 17</title><link>https://jaronoff97.github.io/archives/2017-03-21-ds-4100-day-17/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-21-ds-4100-day-17/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking more about predictive analytics
Prediction Confidence Forecast range A forecast should be given as a range. The range to provide is the 95% Confidence Interval, i.e., the range into which there is a 95% probability that the actual value will fall. Forecasting models must be continually evaluated to assure that they still provide accurate forecast estimates. The tracking signal (TS) is a measure of the quality of the forecasts:</description></item><item><title>CS 3500 Day 16</title><link>https://jaronoff97.github.io/archives/2017-03-17-cs-3500-day-16/</link><pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-17-cs-3500-day-16/</guid><description>The reason this is the 16th, and not the 15th, is because one day of class was cancelled and I wasn&amp;rsquo;t at another, this will be the same case for my DS 4100 notes.
Today we&amp;rsquo;re going over the adapter pattern, which is pretty cool and gross (classic OOD java), but i dont really need to learn it again, so i&amp;rsquo;m not going to take notes on it.</description></item><item><title>DS 4100 Day 16</title><link>https://jaronoff97.github.io/archives/2017-03-17-ds-4100-day-16/</link><pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-17-ds-4100-day-16/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re doing more on regression model predictions.
Regression Regression models are a mathematical equation used to predict a value based on empirical observations. The prediction is never correct, but, depending on the “fit of data,” it can be reasonably good.
The variable to be predicted is called the dependent variable
Sometimes also called the response variable The value of this variable depends on the value(s) of the independent variable(s)</description></item><item><title>DS 4100 Day 15</title><link>https://jaronoff97.github.io/archives/2017-02-28-ds-4100-day-15/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-28-ds-4100-day-15/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re continuing our lesson on statistics.
Statistical Inference Statistical inference combines the methods of descriptive statistics with the theory of probability to infer characteristics of a large population from small sample. The sample must be selected randomly and must be “large enough” to be statistically significant.
Statistical Significance Statistical significance means that the characteristics of the sample are likely not due to chance or random error.</description></item><item><title>CS 3500 Day 14</title><link>https://jaronoff97.github.io/archives/2017-02-24-cs-3500-day-14/</link><pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-24-cs-3500-day-14/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking more about big O, and efficiency.
T(n) Name Example O(1) Constant Adding to the front of a linked list O(n) Linear Accessing each element of an array O(n^2) Quadratic Checking duplicates in a list O(n^3) Cubic Matrix multiplication O(n^d) Polynomial A bunch of random things O(log(n)) Logarithmic Binary search O(nlog(n)) Linearithmic Mergesort, heapsort, quicksort A representation:
Now we&amp;rsquo;re talking about the traveling salesman problem.</description></item><item><title>DS 4100 Day 14</title><link>https://jaronoff97.github.io/archives/2017-02-24-ds-4100-day-14/</link><pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-24-ds-4100-day-14/</guid><description>DS 4100 Data Collection, Integration, and Analysis Descriptive Analytics When analyzing data it is critical to ask where the data comes from and how it was produced, obtained, or collected.
In particular, the quality of the data must be assessed and, if necessary, the analysis must be qualified if data is of poor quality or partially missing.
Data provenance describes the organizational processes that are in place to ensure accurate collection and curation of the data.</description></item><item><title>CS 3500 Day 13</title><link>https://jaronoff97.github.io/archives/2017-02-21-cs-3500-day-13/</link><pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-21-cs-3500-day-13/</guid><description>Object Oriented Design Today we&amp;rsquo;re finally getting into performance, and how to make our programs faster using the proper Java classes.
String result = &amp;#34;&amp;#34;; for (...) { ... result += ...; ... } return result; In the previous code example, we&amp;rsquo;re adding something to a string. This is the efficiency of that:
This is a very innefficient operation, with a poor runtime. We want something that can be added to quickly:</description></item><item><title>DS 4100 Day 13</title><link>https://jaronoff97.github.io/archives/2017-02-21-ds-4100-day-13/</link><pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-21-ds-4100-day-13/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking a bit about NoSQL databases. These databases can be divided into four generes:
Key-Value Columnar Document Graph Key-Value Key-Value (KV) databases such as Redis and Riak are the simplest kind of database in which keys are stored with matching values. A KV-DB is essentially a lookup table that often uses hashing to speed up retrieval. KV-DBs scale easily and have high performance.</description></item><item><title>CS 3500 Day 12</title><link>https://jaronoff97.github.io/archives/2017-02-17-cs-3500-day-12/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-17-cs-3500-day-12/</guid><description>Object Oriented Design Today we&amp;rsquo;re going back to turtles:
Rather than having just calling methods in the controller:
public class SimpleController { public static void main(String[] args) { Scanner s = new Scanner(System.in); TracingTurtleModel m = new SmarterTurtle(); while (s.hasNext()) { String in = s.next(); switch(in) { case &amp;#34;q&amp;#34;: case &amp;#34;quit&amp;#34;: return; case &amp;#34;show&amp;#34;: for (Line l : m.getLines()) { System.out.println(l); } break; case &amp;#34;move&amp;#34;: try { double d = s.</description></item><item><title>DS 4100 Day 12</title><link>https://jaronoff97.github.io/archives/2017-02-17-ds-4100-day-12/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-17-ds-4100-day-12/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking more about SQL.
Three primary operations in relational database:
Selection retrieve specific rows from a table Projection retrieve specific columns from a table Join combine multiple tables The basic schema for a query is as follows:
SELECT &amp;lt;attribute list&amp;gt; FROM &amp;lt;table list&amp;gt; WHERE &amp;lt;condition&amp;gt; GROUP BY &amp;lt;column&amp;gt; HAVING &amp;lt;search-condition&amp;gt; ORDER BY &amp;lt;column&amp;gt;; Column Calculation In SQL it&amp;rsquo;s possible to calculate columns on the fly:</description></item><item><title>CS 3500 Day 11</title><link>https://jaronoff97.github.io/archives/2017-02-14-cs-3500-day-11/</link><pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-14-cs-3500-day-11/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking more about invariance. We&amp;rsquo;re going to talk about invariance in terms of heaps.
We&amp;rsquo;re also implementing &amp;ldquo;Turtle Graphics&amp;rdquo;:
Basically a turtle has a position and a direction on the screen. It can only walk in the direction it&amp;rsquo;s facing. It can change it&amp;rsquo;s direction by turning in place. The turtle can save it&amp;rsquo;s state, and return to its state.
A Turtle may need:
A direction A distance for moving State Position of Turtle A canvas for drawing List of all saved states Operations:</description></item><item><title>DS 4100 Day 11</title><link>https://jaronoff97.github.io/archives/2017-02-14-ds-4100-day-11/</link><pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-14-ds-4100-day-11/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking about storing data in a relational database (MySQL). We&amp;rsquo;re going to be focusing on SQL right now, in a couple of weeks we&amp;rsquo;re going to be doing work in NoSQL; MongoDB, couch, etc. Eventually, I&amp;rsquo;ll have to make a full pipeline of data, starting with collection, then storage, then retrieval, and finally a predictive model. Finally, there needs to be a report; possibly a visualization.</description></item><item><title>CS 3500 Day 10</title><link>https://jaronoff97.github.io/archives/2017-02-10-cs-3500-day-10/</link><pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-10-cs-3500-day-10/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking about mocks. Mocks are components that can replace an actual componeny. They are very useful for testing purposes. We call these components &amp;lsquo;stubs&amp;rsquo;.
Now back to the rest of the lecture:
We&amp;rsquo;re talking about encapsulation, specifically in the context of connect N:
When we&amp;rsquo;re using multiple dimensions, it&amp;rsquo;s easiest to use a map:
Map&amp;lt;String, Integer&amp;gt; configuration; Status status; Object turn; Object hypercolumns; But what about status?</description></item><item><title>DS 4100 Day 10</title><link>https://jaronoff97.github.io/archives/2017-02-10-ds-4100-day-10/</link><pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-10-ds-4100-day-10/</guid><description>DS 4100 Data Collection, Integration, and Analysis The reason some of the previous days are missing is because they were either work days or we didn&amp;rsquo;t have class. Today we&amp;rsquo;re talking about scraping.
Scraping Scraping often starts with making GET requests. Take the HTML and search through the HTML for the data.
Process:
Get a website -&amp;gt; Scrape it -&amp;gt; Get data
Be careful of websites that do not allow web scraping.</description></item><item><title>CS 3500 Day 9</title><link>https://jaronoff97.github.io/archives/2017-02-07-cs-3500-day-9/</link><pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-07-cs-3500-day-9/</guid><description>Object Oriented Design Ugh, another tutorial on git. I&amp;rsquo;m not going to write anything about that because I&amp;rsquo;ve been through WAY too many of these. That&amp;rsquo;s all we did today so that&amp;rsquo;s all I&amp;rsquo;m going to write about :P</description></item><item><title>CS 3500 Day 8</title><link>https://jaronoff97.github.io/archives/2017-02-03-cs-3500-day-8/</link><pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-03-cs-3500-day-8/</guid><description>Object Oriented Design Today we&amp;rsquo;re getting back to the calculator controller and model we were working on last time:
package cs3500.lec08; import java.io.InputStream; import java.io.PrintStream; import java.util.Scanner; /** * Demonstrates a simple command-line-based calculator */ public class SimpleCalc1 { public static void main(String[] args) { Calculator model = new Calculator(); CalcController controller = new CalcController(model); controller.go(); } } class CalcController { private final Calculator model; private InputStream input; private PrintStream output; public CalcController(Calculator model) { this.</description></item><item><title>CS 3500 Day 7</title><link>https://jaronoff97.github.io/archives/2017-01-31-cs-3500-day-7/</link><pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-31-cs-3500-day-7/</guid><description>Object Oriented Design Today we&amp;rsquo;re moving onto controllers, the C in MVC.
The controller takes input from the user and decides what to do.
Controllers:
Glue of the system Controls how and when the model is used Controls what must be shown to the view and when (in some cases) Controls what action must be taken when user interacts with system (in some cases) Controls the sequence of operations in an application(in some cases) The view should NEVER talk directly to the model (and vice versa).</description></item><item><title>DS 4100 Day 7</title><link>https://jaronoff97.github.io/archives/2017-01-31-ds-4100-day-7/</link><pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-31-ds-4100-day-7/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking about how to use excel to check the integrity of your results. It&amp;rsquo;s all about table lookup. Searches in excel can only return a single value.
Excel is boring and annoying and whenever I need to work in it, I&amp;rsquo;m either going to run SQL queries or write some python code to do whatever I want. We&amp;rsquo;ve been talking a lot about it, but I&amp;rsquo;m zoning out to it.</description></item><item><title>CS 3500 Day 6</title><link>https://jaronoff97.github.io/archives/2017-01-27-cs-3500-day-6/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-27-cs-3500-day-6/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking about the static keyword. Static properties are owned by a class not an object. A cooler way to use static, however, is with inner static classes.
class Widget { private Widget(...) { ... } public static class Factory { public Factory() { ... } public Widget create(...) { ... ++widgetIdCounter; ... } private int widgetIdCounter; } } Basically, the reason we do this is because we only want to make a factory in the context of widgets.</description></item><item><title>DS 4100 Day 6</title><link>https://jaronoff97.github.io/archives/2017-01-27-ds-4100-day-6/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-27-ds-4100-day-6/</guid><description>DS 4100 Data Collection, Integration, and Analysis A lot of assignments coming up so I may blog about that but TBD.
Today was a pretty insignificant day: we went over our future assignments, and then did a show and tell about our first assignment to see how many different ways there are to complete it. I anticipate there&amp;rsquo;s going to be a longer post on Monday.</description></item><item><title>CS 3500 Day 5</title><link>https://jaronoff97.github.io/archives/2017-01-24-cs-3500-day-5/</link><pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-24-cs-3500-day-5/</guid><description>Object Oriented Design As you may notice there is no part 4 because I didn&amp;rsquo;t go to class that day. We jump into class today with basic Java arrays.
Arrays int[] array1 = new int[] {2, 4, 6, 8}; int[] array2 = new int[54]; String[] array3 = new String[23]; Here&amp;rsquo;s how we use them:
int[] intArray = {2, 4, 6, 8}; assertEquals(4, intArray[1]); assertEquals(8, intArray[3]); intArray[3] = 17; assertEquals(17, intArray[3]); assertEquals(4, intArray.</description></item><item><title>DS 4100 Day 5</title><link>https://jaronoff97.github.io/archives/2017-01-24-ds-4100-day-5/</link><pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-24-ds-4100-day-5/</guid><description>DS 4100 Data Collection, Integration, and Analysis Like my OOD posts, I wasn&amp;rsquo;t here in class for day 4, so I&amp;rsquo;m skipping right to day 5. Today/ this week we&amp;rsquo;re doing data importing from multiple sources as well as scraping. We started by importing CSVs and txt files. Now we&amp;rsquo;re going to import from other normal files, JSON, and XML. Eventually we&amp;rsquo;re going to be getting data from databases.
Packages Packages are collections of R functions, data, and compield code in a well-defined format.</description></item><item><title>CS 3500 Day 3</title><link>https://jaronoff97.github.io/archives/2017-01-17-cs-3500-day-3/</link><pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-17-cs-3500-day-3/</guid><description>Object Oriented Design We&amp;rsquo;re back to talking about durations, and how we can make our own classes that we use basic operations on.
We want to be able to:
Compare Add Subtract Check Equality We&amp;rsquo;re going to be talking about hashCode() and equals(Object other)
The comparable interface enforces compareTo, equals, and hashCode. The abstract class we&amp;rsquo;ll design for Duration needs to have a conversion to seconds, a conversion to Hms (hours, minutes, seconds), and a way to add two durations to each other.</description></item><item><title>DS 4100 Day 3</title><link>https://jaronoff97.github.io/archives/2017-01-17-ds-4100-day-3/</link><pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-17-ds-4100-day-3/</guid><description>DS 4100 Data Collection, Integration, and Analysis Day 3, we&amp;rsquo;re going over basic control flow:
&amp;gt; for (i in 1:3) { print(paste(&amp;#34;i =&amp;#34;,i)) } [1] &amp;#34;i = 1&amp;#34; [1] &amp;#34;i = 2&amp;#34; [1] &amp;#34;i = 3&amp;#34; &amp;gt; i [1] 3 cities &amp;lt;- c(&amp;#34;Boston&amp;#34;, &amp;#34;New York&amp;#34;, &amp;#34;San Francisco&amp;#34;) for(city in cities) { print(city) } You can also use for loops to iterate data frames.
# create a data frame c1&amp;lt;-c(&amp;#34;AA&amp;#34;,&amp;#34;BB&amp;#34;,&amp;#34;CC&amp;#34;) c2&amp;lt;-c(11,22,33) df&amp;lt;-data.</description></item><item><title>CS 3500 Day 2</title><link>https://jaronoff97.github.io/archives/2017-01-13-cs-3500-day-2/</link><pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-13-cs-3500-day-2/</guid><description>Object Oriented Design Second day of OOD we dive right in to books and citations. Basically we have books and two ways to cite them: MLA and APA. What happens when we want to add a new citation for websites. In our original system we just have to add one case. The racket code to do this properly looks like this:
;; new-article: String String String Number Number Number -&amp;gt; Publication ;; To construct a new article.</description></item><item><title>DS 4100 Day 2</title><link>https://jaronoff97.github.io/archives/2017-01-13-ds-4100-day-2/</link><pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-13-ds-4100-day-2/</guid><description>DS 4100 Data Collection, Integration, and Analysis Everyone is downloading R, meanwhile I&amp;rsquo;m just sitting here and finishing up Java.
Data is stored as objects in R. Objects are created by:
Reading data from an external file Retrieving data from a URL Creating an object directly from command line Instantiating an object from within a program Now we&amp;rsquo;re going over R, basically what I learned in the past (6) tutorials.</description></item><item><title>CS 3500 Day 1</title><link>https://jaronoff97.github.io/archives/2017-01-10-cs-3500-day-1/</link><pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-10-cs-3500-day-1/</guid><description>Object Oriented Design This is my first post for OOD, I&amp;rsquo;m going to be using this as a place to take notes and write code.
Course Website
They say to use IntteliJ but like almost everything else I&amp;rsquo;m going to try and only use Sublime Text. I may have to make custom build scripts to match intelliJ projects, but I hate Android Studio (an IntelliJ fork) so I&amp;rsquo;m really going to try and steer clear from that.</description></item><item><title>DS 4100 Day 1</title><link>https://jaronoff97.github.io/archives/2017-01-10-ds-4100-day-1/</link><pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-10-ds-4100-day-1/</guid><description>DS 4100 Data Collection, Integration, and Analysis Course Website
Just like my CS 3500 posts, this series is for my data science class notes. This class is what most of my R tutorial posts have been for (I&amp;rsquo;m going to continue those until I finish the book). Here are the units:
Unit 1 - Essentials Concepts of Data Science Unit 2 - Programming in R for Data Science Unit 3 - Data Collection &amp;amp; Integration Unit 4 - Data Storage Unit 5 - Data Analytics Unit 6 - Python Programming for Data Science Unit 7 - Data Quality &amp;amp; Governance So it seems like we start with R, and eventually get to Python.</description></item></channel></rss>