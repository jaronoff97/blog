<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Blog</title><link>https://jaronoff97.github.io/tags/kubernetes/</link><description>Recent content in kubernetes on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jaronoff97.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Phoenix (elixir) Apps on Kubernetes</title><link>https://jaronoff97.github.io/posts/2021-03-02-elixir-kube/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/posts/2021-03-02-elixir-kube/</guid><description>I&amp;rsquo;m currently working on a side project for a friend (on the hush hush right now), and I&amp;rsquo;ve had the pleasure of writing it in elixir using Phoenix. Having avoided touching react for a while, being able to write some pretty simple HTML on top of an elixir backend is a wonderful experience. Local development is simple, but how one goes about preparing and deploying their Phoenix app for Kubernetes is a whole other process.</description></item><item><title>Recursive Argo Page Crawlers</title><link>https://jaronoff97.github.io/posts/2020-10-31-recursive-argo-page-crawler/</link><pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/posts/2020-10-31-recursive-argo-page-crawler/</guid><description>Recently, I&amp;rsquo;ve been doing some work in kubernetes using Argo Workflows. Argo is a hyper powerful tool for running complex jobs, and allows you to run easily parallelized and templated code. One great use case for Argo are for running jobs of unknown length to parallelize data uploads and transformations. Unfortunately very little documentation / examples exist in order to help you do that, so I figured I&amp;rsquo;d share that here in case there&amp;rsquo;s anyone grepping around the internet like I was.</description></item></channel></rss>