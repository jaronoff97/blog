<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Blog</title><link>https://jaronoff97.github.io/tags/python/</link><description>Recent content in python on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 May 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://jaronoff97.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 6, Final Python Project</title><link>https://jaronoff97.github.io/archives/2016-05-15-final-project/</link><pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-15-final-project/</guid><description>So lets make a program that uses everything we&amp;rsquo;ve learned. Let&amp;rsquo;s make a todolist!
todos=[] #Make an empty list of our todos Now to introduce a new way of programming in python
todos=[] def main(): #something will go here if __name__ == &amp;#39;__main__&amp;#39;: main() We&amp;rsquo;ve seen the first part before, we&amp;rsquo;re just making a method called main that takes no parameters. The second part is a bit weird, though. What it&amp;rsquo;s saying is if some variable built-in to python is equal to main call the main() method.</description></item><item><title>Part 5, Dictionaries</title><link>https://jaronoff97.github.io/archives/2016-05-14-dictionaries/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-14-dictionaries/</guid><description>Welcome back! Today is our last day of python and we&amp;rsquo;re going to cover the last part of basic python: dictionaries. Dictionaries work just like you&amp;rsquo;d expect. For every &amp;lsquo;key&amp;rsquo; in the dictionary there must be a corresponding value. Lets think about this like a literal dictionary:
mirriam_webster = { &amp;#34;Programming&amp;#34;:&amp;#34;the action or process of writing computer programs.&amp;#34;, &amp;#34;Python&amp;#34;:&amp;#34;a high-level general-purpose programming language.&amp;#34;, &amp;#34;Learning&amp;#34;:&amp;#34;the acquisition of knowledge or skills through experience, study, or by being taught&amp;#34; } To make a dictionary we use {}, curly brackets.</description></item><item><title>Part 4, More Loops</title><link>https://jaronoff97.github.io/archives/2016-05-13-control-flow-part-2/</link><pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-13-control-flow-part-2/</guid><description>And we&amp;rsquo;re back (after a slight hiatus)! Let another day of Python begin!! So let&amp;rsquo;s back up for a second. We can make variables really easily:
x=5 y=6 z=7 a=8 b=9#and so forth And right now if we wanted to print out all the numbers between 1 and 100 we could do this:
num=0 while num &amp;lt;= 100: print(num) num = num +1 This will print all the numbers between 0 and 100 (inclusive).</description></item><item><title>Part 2, More on Functions</title><link>https://jaronoff97.github.io/archives/2016-05-11-more-on-functions/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-11-more-on-functions/</guid><description>And we&amp;rsquo;re back! Let another day of Python begin!! Here&amp;rsquo;s where we left off:
{% highlight python %} def f(x): w = x * 10 print(w) {% endhighlight %}
So we know how to make numbers, and we know how to make functions that do stuff to those numbers. But what about other kinds of variables, letters? words? sentences? paragraphs? In the programming world we call those Strings!
Here&amp;rsquo;s how we make those:</description></item><item><title>Part 3, Control Flow</title><link>https://jaronoff97.github.io/archives/2016-05-12-control-flow/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-12-control-flow/</guid><description>And we&amp;rsquo;re back! Let another day of Python begin!! We know how to make variables (Strings and Numbers) and we know how to make functions that do stuff to those variables. But what if we want to do something different for each kind of variable we get? Well, the answer lies within one of the words in the previous sentence.
I wonder IF you&amp;rsquo;ll get it&amp;hellip;
{% highlight python %} def hello(foo=&amp;ldquo;hello&amp;rdquo;,bar=&amp;ldquo;world&amp;rdquo;): if bar is not &amp;ldquo;world&amp;rdquo;: print(&amp;ldquo;Who are you saying hello to?</description></item><item><title>Part 1, Welcome to python</title><link>https://jaronoff97.github.io/archives/2016-05-10-welcome-to-python/</link><pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-10-welcome-to-python/</guid><description>Welcome to Python! Python is a really great programming language, thats easy to learn and fun to use. In order to write python code, you have two options. You can use what&amp;rsquo;s called interactive mode which is done by going to terminal and typing
{% highlight bash %} python {% endhighlight %}
You should see the following pop up:
{% highlight bash %} Python 2.7 (#1, Feb 28 2010, 00:02:06) Type &amp;ldquo;help&amp;rdquo;, &amp;ldquo;copyright&amp;rdquo;, &amp;ldquo;credits&amp;rdquo; or &amp;ldquo;license&amp;rdquo; for more information.</description></item></channel></rss>