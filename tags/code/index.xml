<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on Blog</title><link>https://jaronoff97.github.io/tags/code/</link><description>Recent content in code on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Aug 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jaronoff97.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Firebase and Swift</title><link>https://jaronoff97.github.io/archives/2017-08-22-firebase-and-swift/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-08-22-firebase-and-swift/</guid><description>Hello! Per request of a friendly reddit user, I&amp;rsquo;m going to be doing a quick tutorial on using firebase with swift and how to structure your data models. Before we do anything, just a quick disclaimer, this tutorial is in swift 3, which, even though my life would be made much easier had I used swift 4 (google codeable swift 4), is the current default.
Basic project setup:
Single page application default in XCode Cocoapods to install Firebase You&amp;rsquo;ll be able to find the project&amp;rsquo;s link at the end of this guide.</description></item><item><title>Learning R Part 6</title><link>https://jaronoff97.github.io/archives/2017-01-11-learning-r-part-6/</link><pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-11-learning-r-part-6/</guid><description>Learning R Part 6 Part 6. Oh god. This language. Let it be over. Well this is working with enviroments which will be useful for my data science classes. I&amp;rsquo;m gonna dive right in.
&amp;gt; library(pryr) &amp;gt; parenvs(all = True) Error: object &amp;#39;True&amp;#39; not found &amp;gt; parenvs(all = T) label name 1 &amp;lt;environment: R_GlobalEnv&amp;gt; &amp;#34;&amp;#34; 2 &amp;lt;environment: package:pryr&amp;gt; &amp;#34;package:pryr&amp;#34; 3 &amp;lt;environment: package:stats&amp;gt; &amp;#34;package:stats&amp;#34; 4 &amp;lt;environment: package:graphics&amp;gt; &amp;#34;package:graphics&amp;#34; 5 &amp;lt;environment: package:grDevices&amp;gt; &amp;#34;package:grDevices&amp;#34; 6 &amp;lt;environment: package:utils&amp;gt; &amp;#34;package:utils&amp;#34; 7 &amp;lt;environment: package:datasets&amp;gt; &amp;#34;package:datasets&amp;#34; 8 &amp;lt;environment: package:methods&amp;gt; &amp;#34;package:methods&amp;#34; 9 &amp;lt;environment: 0x7f9a81097d78&amp;gt; &amp;#34;Autoloads&amp;#34; 10 &amp;lt;environment: base&amp;gt; &amp;#34;&amp;#34; 11 &amp;lt;environment: R_EmptyEnv&amp;gt; &amp;#34;&amp;#34; &amp;gt; as.</description></item><item><title>Learning R Part 5</title><link>https://jaronoff97.github.io/archives/2017-01-08-learning-r-part-5/</link><pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-08-learning-r-part-5/</guid><description>Learning R Part 5 Part 5, modifying values in R. I&amp;rsquo;m betting this is going to be a contiuation of the same. It seems we&amp;rsquo;re just going to combine setting values and indexing.
&amp;gt; vec &amp;lt;- c(0, 0, 0, 0, 0, 0) &amp;gt; vec [1] 0 0 0 0 0 0 &amp;gt; vec[1] [1] 0 &amp;gt; vec[1] &amp;lt;- 1000 &amp;gt; vec [1] 1000 0 0 0 0 0 &amp;gt; vec[c(1, 3, 5)] &amp;lt;- c(1, 1, 1) &amp;gt; vec [1] 1 0 1 0 1 0 &amp;gt; vec[4:6] &amp;lt;- vec[4:6] + 1 &amp;gt; vec [1] 1 0 1 1 2 1 &amp;gt; deck &amp;lt;- read.</description></item><item><title>Learning R Part 4</title><link>https://jaronoff97.github.io/archives/2017-01-07-learning-r-part-4/</link><pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-07-learning-r-part-4/</guid><description>Learning R Part 4 Part 4, R notation. This part is about shuffling, dealing, and accesing cards. Okay so, the first part is selecting values. Before anything I need to load the deck again.
&amp;gt; deck[ , ] (ALL THE CARDS) &amp;gt; deck[1,1] [1] king Levels: ace eight five four jack king nine queen seven six ten three two &amp;gt; deck[1, 1] [1] king Levels: ace eight five four jack king nine queen seven six ten three two &amp;gt; deck[1, c(1, 2, 3)] face suit value 1 king spades 13 &amp;gt; deck[1, 1:3] face suit value 1 king spades 13 &amp;gt; deck[c(1, 1), 1:3] face suit value 1 king spades 13 1.</description></item><item><title>Learning R Part 3</title><link>https://jaronoff97.github.io/archives/2017-01-06-learning-r-part-3/</link><pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-06-learning-r-part-3/</guid><description>Learning R Part 3 Part 3, this chapter is all about R objects and I&amp;rsquo;m not excited. R objects, from what I&amp;rsquo;ve gathered are barely objects. We start this chapter with a bunch of different data types. R has six basic atomic vector data types: doubles, integers, characters, logicals, complex, and raw.
&amp;gt; die &amp;lt;- c(1, 2, 3, 4, 5, 6) &amp;gt; die [1] 1 2 3 4 5 6 &amp;gt; is.</description></item><item><title>Learning R Part 2</title><link>https://jaronoff97.github.io/archives/2017-01-05-learning-r-part-2/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-05-learning-r-part-2/</guid><description>Learning R Part 2 Part 2, here we go! This next part is about packages and help pages. This chapter is pretty short, and basically wraps up the dice &amp;lsquo;project&amp;rsquo;. Now it&amp;rsquo;s time to install the qplot function which is part of the ggplot2 package.
&amp;gt; install.packages(&amp;#34;ggplot2&amp;#34;) (A BUNCH OF STUFF!!!!!) &amp;gt; qplot Error: object &amp;#39;qplot&amp;#39; not found &amp;gt; library(&amp;#34;ggplot2&amp;#34;) &amp;gt; qplot function (x, y = NULL, ..., data, facets = NULL, margins = FALSE, geom = &amp;#34;auto&amp;#34;, xlim = c(NA, NA), ylim = c(NA, NA), log = &amp;#34;&amp;#34;, main = NULL, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), asp = NA, stat = NULL, position = NULL) { if (!</description></item><item><title>Learning R Part 1</title><link>https://jaronoff97.github.io/archives/2017-01-04-learning-r-part-1/</link><pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-04-learning-r-part-1/</guid><description>Learning R Part 1 Okay so today I begin learning R for my data science class, I&amp;rsquo;m gonna try and make a post a day. From what a lot of my friends have told me R is a pretty crappy language, I&amp;rsquo;m excited to see what the language holds.
I&amp;rsquo;m going to be following the Hands-On Programming with R
To follow these tutorials, I&amp;rsquo;m going to be using the R repl (I installed a package in Sublime Text to handle all of that).</description></item><item><title>Part 4, Optionals, Extensions, and Protocols</title><link>https://jaronoff97.github.io/archives/2016-05-19-optionals-extensions-protocols/</link><pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-19-optionals-extensions-protocols/</guid><description>Now that we&amp;rsquo;ve gotten over the hurdle of closures we can learn the last three things we need to know before we start iOS programming. Let&amp;rsquo;s start with Optionals.
Let&amp;rsquo;s make a class with a couple properties
class Person { var name: String var age: Int var street: String init(name: String, age: Int) { self.name = name self.age = age } } let jacob = Person(name: &amp;#34;Jacob&amp;#34;, age: 18) print(jacob) When you run this code, you&amp;rsquo;ll get two errors:</description></item><item><title>Part 2, Swifty Stuff</title><link>https://jaronoff97.github.io/archives/2016-05-18-swifty-stuff/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-18-swifty-stuff/</guid><description>Welcome back to another glorious day of Swift! Today we&amp;rsquo;re going to learn about differnt data structures to make efficient and effective Object Oriented(OO) Code. The first one we&amp;rsquo;ll go over is the classic OO design: the class.
class Student { var name: String var age: Int var grade: String static let uniform_needed = false private var _homework: [String] = [] public var homework:[String]{ get { return _homework } } init(name:String, age:Int, grade:String) { self.</description></item><item><title>Part 3, Cool, Difficult Swift</title><link>https://jaronoff97.github.io/archives/2016-05-18-cool-difficult-swift/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-18-cool-difficult-swift/</guid><description>Today is gonna be our toughest day yet, but by the end of it, you&amp;rsquo;re gonna know everything you have to about Swift.
Lets look back to our Student and Homework classes:
enum Subject { case English case Programming case Language case Science case History } struct Homework { var subject: Subject var due_date: String var name: String } class Student { var name: String var age: Int var grade: String static let uniform_needed = false private var _homework: [Homework] = [] public var homework:[Homework]{ get { return _homework } } init(name:String, age:Int, grade:String) { self.</description></item><item><title>Part 1, Welcome to Swift</title><link>https://jaronoff97.github.io/archives/2016-05-17-welcome-to-swift/</link><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-17-welcome-to-swift/</guid><description>Welcome to Swift! Swift is my favorite programming language right now for a bunch of reasons. If you&amp;rsquo;re familiar with a statically-typed language like Java, C, or C++, Swift will come as a breath of fresh air. Swift is a statically-typed, type-inferred language. This tutorial is meant for more experienced programmers, you should have a good understanding of either a statically-typed language like Java or a great understanding of a dynamically-typed language like Python.</description></item><item><title>Part 6, Final Python Project</title><link>https://jaronoff97.github.io/archives/2016-05-15-final-project/</link><pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-15-final-project/</guid><description>So lets make a program that uses everything we&amp;rsquo;ve learned. Let&amp;rsquo;s make a todolist!
todos=[] #Make an empty list of our todos Now to introduce a new way of programming in python
todos=[] def main(): #something will go here if __name__ == &amp;#39;__main__&amp;#39;: main() We&amp;rsquo;ve seen the first part before, we&amp;rsquo;re just making a method called main that takes no parameters. The second part is a bit weird, though. What it&amp;rsquo;s saying is if some variable built-in to python is equal to main call the main() method.</description></item><item><title>Part 5, Dictionaries</title><link>https://jaronoff97.github.io/archives/2016-05-14-dictionaries/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-14-dictionaries/</guid><description>Welcome back! Today is our last day of python and we&amp;rsquo;re going to cover the last part of basic python: dictionaries. Dictionaries work just like you&amp;rsquo;d expect. For every &amp;lsquo;key&amp;rsquo; in the dictionary there must be a corresponding value. Lets think about this like a literal dictionary:
mirriam_webster = { &amp;#34;Programming&amp;#34;:&amp;#34;the action or process of writing computer programs.&amp;#34;, &amp;#34;Python&amp;#34;:&amp;#34;a high-level general-purpose programming language.&amp;#34;, &amp;#34;Learning&amp;#34;:&amp;#34;the acquisition of knowledge or skills through experience, study, or by being taught&amp;#34; } To make a dictionary we use {}, curly brackets.</description></item><item><title>Part 4, More Loops</title><link>https://jaronoff97.github.io/archives/2016-05-13-control-flow-part-2/</link><pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-13-control-flow-part-2/</guid><description>And we&amp;rsquo;re back (after a slight hiatus)! Let another day of Python begin!! So let&amp;rsquo;s back up for a second. We can make variables really easily:
x=5 y=6 z=7 a=8 b=9#and so forth And right now if we wanted to print out all the numbers between 1 and 100 we could do this:
num=0 while num &amp;lt;= 100: print(num) num = num +1 This will print all the numbers between 0 and 100 (inclusive).</description></item><item><title>Part 2, More on Functions</title><link>https://jaronoff97.github.io/archives/2016-05-11-more-on-functions/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-11-more-on-functions/</guid><description>And we&amp;rsquo;re back! Let another day of Python begin!! Here&amp;rsquo;s where we left off:
{% highlight python %} def f(x): w = x * 10 print(w) {% endhighlight %}
So we know how to make numbers, and we know how to make functions that do stuff to those numbers. But what about other kinds of variables, letters? words? sentences? paragraphs? In the programming world we call those Strings!
Here&amp;rsquo;s how we make those:</description></item><item><title>Part 3, Control Flow</title><link>https://jaronoff97.github.io/archives/2016-05-12-control-flow/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-12-control-flow/</guid><description>And we&amp;rsquo;re back! Let another day of Python begin!! We know how to make variables (Strings and Numbers) and we know how to make functions that do stuff to those variables. But what if we want to do something different for each kind of variable we get? Well, the answer lies within one of the words in the previous sentence.
I wonder IF you&amp;rsquo;ll get it&amp;hellip;
{% highlight python %} def hello(foo=&amp;ldquo;hello&amp;rdquo;,bar=&amp;ldquo;world&amp;rdquo;): if bar is not &amp;ldquo;world&amp;rdquo;: print(&amp;ldquo;Who are you saying hello to?</description></item><item><title>Part 1, Welcome to python</title><link>https://jaronoff97.github.io/archives/2016-05-10-welcome-to-python/</link><pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-10-welcome-to-python/</guid><description>Welcome to Python! Python is a really great programming language, thats easy to learn and fun to use. In order to write python code, you have two options. You can use what&amp;rsquo;s called interactive mode which is done by going to terminal and typing
{% highlight bash %} python {% endhighlight %}
You should see the following pop up:
{% highlight bash %} Python 2.7 (#1, Feb 28 2010, 00:02:06) Type &amp;ldquo;help&amp;rdquo;, &amp;ldquo;copyright&amp;rdquo;, &amp;ldquo;credits&amp;rdquo; or &amp;ldquo;license&amp;rdquo; for more information.</description></item></channel></rss>