<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Archives on Blog</title><link>https://jaronoff97.github.io/archives/</link><description>Recent content in Archives on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://jaronoff97.github.io/archives/index.xml" rel="self" type="application/rss+xml"/><item><title>Marvel Milestones</title><link>https://jaronoff97.github.io/archives/2018-01-02-marvel-milestones/</link><pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2018-01-02-marvel-milestones/</guid><description>Marvel Things! Content Seen Captain America Agent Carter Season 1 Agent Carter One Shot Agent Carter Season 2 Iron Man Iron Man 2 The Incredible Hulk The Consultant A Funny Thing Happened on the way to Thor&amp;rsquo;s Hammer Thor Avengers Item 47 Iron Man 3 All Hail The King Thor: The Dark World Agents of S.H.I.E.L.D. Season 1 Captain America: The Winter Soldier Agents of S.H.I.E.L.D. Season 2 Guardians of the Galaxy Daredevil Season 1 Guardians of the Galaxy Vol 2 Jessica Jones Season 1 Avengers: Age of Ultron WHIH Ant-Man relevant things Ant-Man Daredevil Season 2 Agents of S.</description></item><item><title>New Year More Blogging</title><link>https://jaronoff97.github.io/archives/2018-01-02-new-year-more-blogging/</link><pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2018-01-02-new-year-more-blogging/</guid><description>2018 Blog Updates and Plans Hello! This year I&amp;rsquo;m planning on blogging way more than I have in the past with a bunch of updates to come. In 2018, I&amp;rsquo;m starting my first Coop at Datadog in NYC. I&amp;rsquo;m really excited to go back for a multitude of reasons; really important work, a lot to learn, NYC is awesome, more exploration to be done! In addition to all the NYC stuff, I&amp;rsquo;m planning on blogging more about tech, food, and marvel.</description></item><item><title>Firebase and Swift</title><link>https://jaronoff97.github.io/archives/2017-08-22-firebase-and-swift/</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-08-22-firebase-and-swift/</guid><description>Hello! Per request of a friendly reddit user, I&amp;rsquo;m going to be doing a quick tutorial on using firebase with swift and how to structure your data models. Before we do anything, just a quick disclaimer, this tutorial is in swift 3, which, even though my life would be made much easier had I used swift 4 (google codeable swift 4), is the current default.
Basic project setup:
Single page application default in XCode Cocoapods to install Firebase You&amp;rsquo;ll be able to find the project&amp;rsquo;s link at the end of this guide.</description></item><item><title>HackNY Week 10</title><link>https://jaronoff97.github.io/archives/2017-08-06-hackny-week-10/</link><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-08-06-hackny-week-10/</guid><description>HackNY Week 10 This was the last week of HackNY and I am so sad to be leaving. I had such an amazing summer and I wish that I got to spend more time with the other fellows. I&amp;rsquo;m planning on coming back to NYC for most of the alumni events and the hackathon in the fall. Hopefully, most of the fellows from my class will be there! My last week at DataDog was also great; I finally pushed out my code to all of our customers.</description></item><item><title>HackNY Week 9</title><link>https://jaronoff97.github.io/archives/2017-07-31-hackny-week-9/</link><pubDate>Mon, 31 Jul 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-07-31-hackny-week-9/</guid><description>HackNY Week 9 This was a very short, but very very fun week. I was lucky enough to go AWS Chicago Summit with DataDog and demo our product. Over the span of 2 days I talked with around 1000 people. It was quite an experience, and I&amp;rsquo;m very glad I got to have it. My boss told me that DataDog is very unique right now because it&amp;rsquo;s small enough where an intern can go to this event, but it&amp;rsquo;s big enough where everyone at the conference has heard of us.</description></item><item><title>HackNY Week 8</title><link>https://jaronoff97.github.io/archives/2017-07-24-hackny-week-8/</link><pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-07-24-hackny-week-8/</guid><description>HackNY Week 8 This week, although I deployed to prod. I had to deal a lot with the operations and bugs inside of my system. Because I was dealing with hundreds of thousands of more requests, many bugs popped up. This included tracking through a bug that took me and my boss 5 hours to figure out. Although it was really annoying, I loved debugging and really having a deeper understanding of what I was doing.</description></item><item><title>HackNY Week 7</title><link>https://jaronoff97.github.io/archives/2017-07-17-hackny-week-7/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-07-17-hackny-week-7/</guid><description>HackNY Week 7 This week I began the lengthy and arduous task of actually deploying my service to production. The process required tons of ops, eyes on, and code changes. I obviously can&amp;rsquo;t go into the details, but it actually was deployed today! It&amp;rsquo;s really cool to use our product to monitor the service i made for our product.
Tech Talk 11: Sisi Wei Today Sisi Wei talked to us about ProPublica and coding in investigative journalism.</description></item><item><title>HackNY Week 6</title><link>https://jaronoff97.github.io/archives/2017-07-10-hackny-week-6/</link><pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-07-10-hackny-week-6/</guid><description>HackNY Week 6 This week I finally got my service deployed and working today! after weeks of ops and annoying bugs, my service is working and sending metrics to DD. Friday night, I went out with many people from work and we bonded over some great KBBQ. In addition to that, this past weekend my friends and I went to an amazing jazz show (Tom Harrell) at the vanguard. I loved seeing a living jazz legend play.</description></item><item><title>HackNY Week 5</title><link>https://jaronoff97.github.io/archives/2017-07-03-hackny-week-5/</link><pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-07-03-hackny-week-5/</guid><description>HackNY Week 5 This week I finally deployed my service for data dog! It took a while to actually figure out the ops behind it, but I finally figured it out and did it! Even though I deployed it, I can&amp;rsquo;t celebrate just yet; I have to test the crap out of it, and gradually enable different aspects of the service during the next couple of weeks. For the next week I&amp;rsquo;m going to be planning different events for my team to help test the service and find bugs.</description></item><item><title>HackNY Week 4</title><link>https://jaronoff97.github.io/archives/2017-06-26-hackny-week-4/</link><pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-06-26-hackny-week-4/</guid><description>HackNY Week 3 This week was pretty hectic because my parents were in town for my sister&amp;rsquo;s 23rd birthday. For her birthday we went to an amazing sushi restaurant where she, her boyfriend, and I did omakase (chef&amp;rsquo;s choice); my parents and my sister&amp;rsquo;s best friend were not up to the challenge. This was probably the best sushi of my life; I had to be very adventurous, I tried raw scallop, king crab, etc.</description></item><item><title>HackNY Week 3</title><link>https://jaronoff97.github.io/archives/2017-06-19-hackny-week-3/</link><pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-06-19-hackny-week-3/</guid><description>HackNY Week 3 This was a great week because i made a lot of progress on my technical project for DataDog, while I can&amp;rsquo;t write about here (NDA&amp;rsquo;s and all) I can talk about how well its going! I&amp;rsquo;ve been figuring their system out more and more, and after working on a couple of bugs I was finally able to begin my project. THe project consists of doing things involving their data pipeline, and I love getting to work with so much data!</description></item><item><title>HackNY Week 1 and 2</title><link>https://jaronoff97.github.io/archives/2017-06-12-hackny-week-1-and-2/</link><pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-06-12-hackny-week-1-and-2/</guid><description>HackNY Week 1 This was my first week of HackNY, and I loved it!!! I&amp;rsquo;m going to write this post by going over, first, the events that we went to, and then I&amp;rsquo;m going to talk about how i liked each of them
Tech Talk 1: Rob Spectre Rob Spectre, a programmer for the NYC counter human trafficking effort, came to talk to us about the work he does to prevent and/or catch human traffickers more effectively.</description></item><item><title>DS 4100 Week 13 Review</title><link>https://jaronoff97.github.io/archives/2017-04-16-ds-4100-week-13-review/</link><pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-16-ds-4100-week-13-review/</guid><description>DS 4100 Weekly Review This is going to be my last weekly blog post, so I&amp;rsquo;m going to take this oppurtunity to reflect on this year. Before I do that, a quick project update:
I decided this weekend that I&amp;rsquo;m going to have to spin up an AWS cluster in order to connect to google BigQuery. Though it was not my first choice, I&amp;rsquo;m pretty sure it&amp;rsquo;s the only way this project is going to work.</description></item><item><title>DS 4100 Week 12 Review</title><link>https://jaronoff97.github.io/archives/2017-04-09-ds-4100-week-12-review/</link><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-09-ds-4100-week-12-review/</guid><description>DS 4100 Weekly Review This weekend I worked on the extra credit assignments and did some more research on my project. I&amp;rsquo;ll start this post with what I learned when doing research with my project and then walkthrough how my extra credit assignments went.
Research project So this weekend, I was looking a lot into the publicly available data sets for reddit. I found a HUGE one available on google BigQuery which I&amp;rsquo;ve never used before.</description></item><item><title>CS 3500 Day 21</title><link>https://jaronoff97.github.io/archives/2017-04-04-cs-3500-day-21/</link><pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-04-cs-3500-day-21/</guid><description>Object Oriented Design Today we&amp;rsquo;re going over javascript, ugh gross. But here we go.
&amp;gt; null &amp;gt;= 0 true &amp;gt; null &amp;lt;= 0 true &amp;gt; null == 0 false &amp;gt; null == undefined true &amp;gt; null &amp;gt;= undefined false &amp;gt; undefined &amp;gt;= 0 false &amp;gt; undefined &amp;lt;= 0 false &amp;gt; undefined == 0 false &amp;gt; null &amp;gt;= undefined false &amp;gt; 100/0 Infinity &amp;gt; Infinity == undefined false &amp;gt; undefined &amp;gt;= Infinity false &amp;gt; undefined &amp;lt;= Infinity false &amp;gt; null &amp;lt;= Infinity true &amp;gt; null &amp;gt;= Infinity false &amp;gt; NaN == null false &amp;gt; NaN &amp;gt;= null false &amp;gt; NaN &amp;lt;= null false &amp;gt; &amp;#34;1&amp;#34;==null false Some more stupid stuff</description></item><item><title>DS 4100 Day 21</title><link>https://jaronoff97.github.io/archives/2017-04-04-ds-4100-day-21/</link><pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-04-ds-4100-day-21/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re doing coding walkthroughs, nothing too exciting.</description></item><item><title>DS 4100 Week 11 Review</title><link>https://jaronoff97.github.io/archives/2017-04-02-ds-4100-week-11-review/</link><pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-04-02-ds-4100-week-11-review/</guid><description>DS 4100 Weekly Review This week I begin my project for my data science class. As my project proposal says, I&amp;rsquo;m going to be doing collaborative filtering on a large reddit data set to determine other communities a user may like. I think this could be a really fun project that I&amp;rsquo;d be excited to share with the reddit community. I&amp;rsquo;m excited to get started on the project, and I think i&amp;rsquo;ll begin working on it this week.</description></item><item><title>DS 4100 Project Proposal</title><link>https://jaronoff97.github.io/archives/2017-03-30-ds-4100-project-proposal/</link><pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-30-ds-4100-project-proposal/</guid><description>DS 4100 Project Proposal For my project, I want to investigate Reddit. There&amp;rsquo;s a lot of openly available data about reddit that I&amp;rsquo;ll be able to scrape. Recently, there was a brief study posted on FiveThirtyEight doing what he called &amp;ldquo;Reddit Algebra&amp;rdquo;, which was actually just a fancier way of explaining set operations.
FiveThirtyEight Article
For the past couple of weeks in my weekly reviews, I&amp;rsquo;ve talked a lot about analyzing reddit data to generate predictions or statistics.</description></item><item><title>DS 4100 Week 10 Review</title><link>https://jaronoff97.github.io/archives/2017-03-26-ds-4100-week-10-review/</link><pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-26-ds-4100-week-10-review/</guid><description>DS 4100 Weekly Review This week I want to talk about one of the most interesting stories i&amp;rsquo;ve seen in the past couple of months. The story was on FiveThirtyEight, it was about analyzing one of the most controversial subreddits on reddit: The_Donald. The author ran a bunch of queries about reddit to insert data into a huge database. He then used this information to do what the author coined as &amp;ldquo;Reddit Algebra&amp;rdquo;.</description></item><item><title>CS 3500 Day 18</title><link>https://jaronoff97.github.io/archives/2017-03-24-cs-3500-day-18/</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-24-cs-3500-day-18/</guid><description>Object Oriented Design Today we&amp;rsquo;re going over the strategy pattern.
class Coord { int row; int col } interface TicTacToeStrategy { Coord chooseMove(TicTacToeModel model, Piece forWhom); } class AnyOpenSquare implements TicTacToeStrategy { public Coord chooseMove(TicTacToeModel model, Piece forWhom) { for (int r = 0; r &amp;lt; 3; r++) for (int c = 0; c &amp;lt; 3; c++) if (model.getPieceAt(r, c) == null) return new Coord(r, c); return null; } } class AnyOpenCorner implements TicTacToeStrategy { public Coord chooseMove(TicTacToeModel model, Piece forWhom) { if (model.</description></item><item><title>CS 3500 Day 17</title><link>https://jaronoff97.github.io/archives/2017-03-21-cs-3500-day-17/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-21-cs-3500-day-17/</guid><description>Today we&amp;rsquo;re going over the decorator pattern. It&amp;rsquo;s used to add new functionality to existing classes.
package com.jaronoff.decorators; public interface Burrito { public String makeBurrito(); } package com.jaronoff.decorators; public class SimpleBurrito implements Burrito { @Override public String makeBurrito() { return &amp;#34;Base Burrito&amp;#34;; } } package com.jaronoff.decorators; abstract class BurritoDecorator implements Burrito { protected Burrito specialBurrito; public BurritoDecorator(Burrito specialBurrito) { this.specialBurrito = specialBurrito; } public String makeBurrito() { return specialBurrito.makeBurrito(); } } package com.</description></item><item><title>DS 4100 Day 17</title><link>https://jaronoff97.github.io/archives/2017-03-21-ds-4100-day-17/</link><pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-21-ds-4100-day-17/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking more about predictive analytics
Prediction Confidence Forecast range A forecast should be given as a range. The range to provide is the 95% Confidence Interval, i.e., the range into which there is a 95% probability that the actual value will fall. Forecasting models must be continually evaluated to assure that they still provide accurate forecast estimates. The tracking signal (TS) is a measure of the quality of the forecasts:</description></item><item><title>DS 4100 Week 9 Review</title><link>https://jaronoff97.github.io/archives/2017-03-19-ds-4100-week-9-review/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-19-ds-4100-week-9-review/</guid><description>DS 4100 Weekly Review This week I want to brainstorm more about my project. I really like the idea of doing some reddit scraping. I&amp;rsquo;ve been looking at a lot of cool reddit data science projects. There have been a couple stand out projects in the past year that have really interested me; there was one about the occurance of swear words in different popular subreddits; another was about linking to news websites in different political subreddits; another was about subreddits that are the most supportive/ kind.</description></item><item><title>CS 3500 Day 16</title><link>https://jaronoff97.github.io/archives/2017-03-17-cs-3500-day-16/</link><pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-17-cs-3500-day-16/</guid><description>The reason this is the 16th, and not the 15th, is because one day of class was cancelled and I wasn&amp;rsquo;t at another, this will be the same case for my DS 4100 notes.
Today we&amp;rsquo;re going over the adapter pattern, which is pretty cool and gross (classic OOD java), but i dont really need to learn it again, so i&amp;rsquo;m not going to take notes on it.</description></item><item><title>DS 4100 Day 16</title><link>https://jaronoff97.github.io/archives/2017-03-17-ds-4100-day-16/</link><pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-17-ds-4100-day-16/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re doing more on regression model predictions.
Regression Regression models are a mathematical equation used to predict a value based on empirical observations. The prediction is never correct, but, depending on the “fit of data,” it can be reasonably good.
The variable to be predicted is called the dependent variable
Sometimes also called the response variable The value of this variable depends on the value(s) of the independent variable(s)</description></item><item><title>DS 4100 Week 8 Review</title><link>https://jaronoff97.github.io/archives/2017-03-05-ds-4100-week-8-review/</link><pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-03-05-ds-4100-week-8-review/</guid><description>DS 4100 Weekly Review This week we focused more on NoSQL, I was happy to learn more about different ways to store data. I was also excited to learn more about the different kinds of NoSQL store management such as key-value, graph, columnar, and document. I&amp;rsquo;m very interested in data pipelines, and I think in my project I&amp;rsquo;m going to use a graph storage system to represent my data. Either that or a document store.</description></item><item><title>DS 4100 Day 15</title><link>https://jaronoff97.github.io/archives/2017-02-28-ds-4100-day-15/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-28-ds-4100-day-15/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re continuing our lesson on statistics.
Statistical Inference Statistical inference combines the methods of descriptive statistics with the theory of probability to infer characteristics of a large population from small sample. The sample must be selected randomly and must be “large enough” to be statistically significant.
Statistical Significance Statistical significance means that the characteristics of the sample are likely not due to chance or random error.</description></item><item><title>DS 4100 Week 7 Review</title><link>https://jaronoff97.github.io/archives/2017-02-26-ds-4100-week-7-review/</link><pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-26-ds-4100-week-7-review/</guid><description>DS 4100 Weekly Review This week has been pretty relaxed, I enjoyed getting to work more and more on databases. It&amp;rsquo;s really fun to script for databases. R is not usually enjoyable, but actually I really liked the ability to quickly do this assignment. It turns out that R is good at doing these kinds of quick scripts where you dont have to care about types. When I was programming this time around it felt way more like programming in Python, which obviously, I enjoy a lot.</description></item><item><title>CS 3500 Day 14</title><link>https://jaronoff97.github.io/archives/2017-02-24-cs-3500-day-14/</link><pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-24-cs-3500-day-14/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking more about big O, and efficiency.
T(n) Name Example O(1) Constant Adding to the front of a linked list O(n) Linear Accessing each element of an array O(n^2) Quadratic Checking duplicates in a list O(n^3) Cubic Matrix multiplication O(n^d) Polynomial A bunch of random things O(log(n)) Logarithmic Binary search O(nlog(n)) Linearithmic Mergesort, heapsort, quicksort A representation:
Now we&amp;rsquo;re talking about the traveling salesman problem.</description></item><item><title>DS 4100 Day 14</title><link>https://jaronoff97.github.io/archives/2017-02-24-ds-4100-day-14/</link><pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-24-ds-4100-day-14/</guid><description>DS 4100 Data Collection, Integration, and Analysis Descriptive Analytics When analyzing data it is critical to ask where the data comes from and how it was produced, obtained, or collected.
In particular, the quality of the data must be assessed and, if necessary, the analysis must be qualified if data is of poor quality or partially missing.
Data provenance describes the organizational processes that are in place to ensure accurate collection and curation of the data.</description></item><item><title>CS 3500 Day 13</title><link>https://jaronoff97.github.io/archives/2017-02-21-cs-3500-day-13/</link><pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-21-cs-3500-day-13/</guid><description>Object Oriented Design Today we&amp;rsquo;re finally getting into performance, and how to make our programs faster using the proper Java classes.
String result = &amp;#34;&amp;#34;; for (...) { ... result += ...; ... } return result; In the previous code example, we&amp;rsquo;re adding something to a string. This is the efficiency of that:
This is a very innefficient operation, with a poor runtime. We want something that can be added to quickly:</description></item><item><title>DS 4100 Day 13</title><link>https://jaronoff97.github.io/archives/2017-02-21-ds-4100-day-13/</link><pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-21-ds-4100-day-13/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking a bit about NoSQL databases. These databases can be divided into four generes:
Key-Value Columnar Document Graph Key-Value Key-Value (KV) databases such as Redis and Riak are the simplest kind of database in which keys are stored with matching values. A KV-DB is essentially a lookup table that often uses hashing to speed up retrieval. KV-DBs scale easily and have high performance.</description></item><item><title>DS 4100 Week 6 Review</title><link>https://jaronoff97.github.io/archives/2017-02-19-ds-4100-week-6-review/</link><pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-19-ds-4100-week-6-review/</guid><description>DS 4100 Weekly Review This week I was very excited to update my scraper for more functionality. Beyond that I focused more on turning this into a full on project. I&amp;rsquo;m looking into more permanent solutions for what im trying to do. Definetly when I start my project I&amp;rsquo;ll need to have this basic stack:
RedditAPI for python Dedicated AWS/ DigitalOcean hosting Probably a relational database for storage Redis for key value caching React front end with d3 for the vis Maybe I&amp;rsquo;ll rope in someone else to help with my project.</description></item><item><title>CS 3500 Day 12</title><link>https://jaronoff97.github.io/archives/2017-02-17-cs-3500-day-12/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-17-cs-3500-day-12/</guid><description>Object Oriented Design Today we&amp;rsquo;re going back to turtles:
Rather than having just calling methods in the controller:
public class SimpleController { public static void main(String[] args) { Scanner s = new Scanner(System.in); TracingTurtleModel m = new SmarterTurtle(); while (s.hasNext()) { String in = s.next(); switch(in) { case &amp;#34;q&amp;#34;: case &amp;#34;quit&amp;#34;: return; case &amp;#34;show&amp;#34;: for (Line l : m.getLines()) { System.out.println(l); } break; case &amp;#34;move&amp;#34;: try { double d = s.</description></item><item><title>DS 4100 Day 12</title><link>https://jaronoff97.github.io/archives/2017-02-17-ds-4100-day-12/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-17-ds-4100-day-12/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking more about SQL.
Three primary operations in relational database:
Selection retrieve specific rows from a table Projection retrieve specific columns from a table Join combine multiple tables The basic schema for a query is as follows:
SELECT &amp;lt;attribute list&amp;gt; FROM &amp;lt;table list&amp;gt; WHERE &amp;lt;condition&amp;gt; GROUP BY &amp;lt;column&amp;gt; HAVING &amp;lt;search-condition&amp;gt; ORDER BY &amp;lt;column&amp;gt;; Column Calculation In SQL it&amp;rsquo;s possible to calculate columns on the fly:</description></item><item><title>CS 3500 Day 11</title><link>https://jaronoff97.github.io/archives/2017-02-14-cs-3500-day-11/</link><pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-14-cs-3500-day-11/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking more about invariance. We&amp;rsquo;re going to talk about invariance in terms of heaps.
We&amp;rsquo;re also implementing &amp;ldquo;Turtle Graphics&amp;rdquo;:
Basically a turtle has a position and a direction on the screen. It can only walk in the direction it&amp;rsquo;s facing. It can change it&amp;rsquo;s direction by turning in place. The turtle can save it&amp;rsquo;s state, and return to its state.
A Turtle may need:
A direction A distance for moving State Position of Turtle A canvas for drawing List of all saved states Operations:</description></item><item><title>DS 4100 Day 11</title><link>https://jaronoff97.github.io/archives/2017-02-14-ds-4100-day-11/</link><pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-14-ds-4100-day-11/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking about storing data in a relational database (MySQL). We&amp;rsquo;re going to be focusing on SQL right now, in a couple of weeks we&amp;rsquo;re going to be doing work in NoSQL; MongoDB, couch, etc. Eventually, I&amp;rsquo;ll have to make a full pipeline of data, starting with collection, then storage, then retrieval, and finally a predictive model. Finally, there needs to be a report; possibly a visualization.</description></item><item><title>DS 4100 Week 5 Review</title><link>https://jaronoff97.github.io/archives/2017-02-12-ds-4100-week-5-review/</link><pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-12-ds-4100-week-5-review/</guid><description>DS 4100 Weekly Review This week I had to write a scraper for class. This was a fun assignment that I got to do in Python. I had a couple of ideas for this assignment, but I was able to decide upon scraping reddit. Reddit has an api, however, this assignment specified that we scrape HTML. I&amp;rsquo;m really interested in eventually doing sentiment analysis; how does what someone says affect the amount of points they get?</description></item><item><title>CS 3500 Day 10</title><link>https://jaronoff97.github.io/archives/2017-02-10-cs-3500-day-10/</link><pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-10-cs-3500-day-10/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking about mocks. Mocks are components that can replace an actual componeny. They are very useful for testing purposes. We call these components &amp;lsquo;stubs&amp;rsquo;.
Now back to the rest of the lecture:
We&amp;rsquo;re talking about encapsulation, specifically in the context of connect N:
When we&amp;rsquo;re using multiple dimensions, it&amp;rsquo;s easiest to use a map:
Map&amp;lt;String, Integer&amp;gt; configuration; Status status; Object turn; Object hypercolumns; But what about status?</description></item><item><title>DS 4100 Day 10</title><link>https://jaronoff97.github.io/archives/2017-02-10-ds-4100-day-10/</link><pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-10-ds-4100-day-10/</guid><description>DS 4100 Data Collection, Integration, and Analysis The reason some of the previous days are missing is because they were either work days or we didn&amp;rsquo;t have class. Today we&amp;rsquo;re talking about scraping.
Scraping Scraping often starts with making GET requests. Take the HTML and search through the HTML for the data.
Process:
Get a website -&amp;gt; Scrape it -&amp;gt; Get data
Be careful of websites that do not allow web scraping.</description></item><item><title>CS 3500 Day 9</title><link>https://jaronoff97.github.io/archives/2017-02-07-cs-3500-day-9/</link><pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-07-cs-3500-day-9/</guid><description>Object Oriented Design Ugh, another tutorial on git. I&amp;rsquo;m not going to write anything about that because I&amp;rsquo;ve been through WAY too many of these. That&amp;rsquo;s all we did today so that&amp;rsquo;s all I&amp;rsquo;m going to write about :P</description></item><item><title>DS 4100 Week 4 Review</title><link>https://jaronoff97.github.io/archives/2017-02-05-ds-4100-week-4-review/</link><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-05-ds-4100-week-4-review/</guid><description>DS 4100 Weekly Review WOW! What a great game tonight! I&amp;rsquo;m really interested in the statistics and probability behind the game. I was looking into what sort of data I can get online and actually found a couple data sources. According to one article I found, the ball was only in play for a total of 16 minutes and 14 seconds. Link to article
What I was more interested in, however, was the probability of the game.</description></item><item><title>CS 3500 Day 8</title><link>https://jaronoff97.github.io/archives/2017-02-03-cs-3500-day-8/</link><pubDate>Fri, 03 Feb 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-02-03-cs-3500-day-8/</guid><description>Object Oriented Design Today we&amp;rsquo;re getting back to the calculator controller and model we were working on last time:
package cs3500.lec08; import java.io.InputStream; import java.io.PrintStream; import java.util.Scanner; /** * Demonstrates a simple command-line-based calculator */ public class SimpleCalc1 { public static void main(String[] args) { Calculator model = new Calculator(); CalcController controller = new CalcController(model); controller.go(); } } class CalcController { private final Calculator model; private InputStream input; private PrintStream output; public CalcController(Calculator model) { this.</description></item><item><title>CS 3500 Day 7</title><link>https://jaronoff97.github.io/archives/2017-01-31-cs-3500-day-7/</link><pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-31-cs-3500-day-7/</guid><description>Object Oriented Design Today we&amp;rsquo;re moving onto controllers, the C in MVC.
The controller takes input from the user and decides what to do.
Controllers:
Glue of the system Controls how and when the model is used Controls what must be shown to the view and when (in some cases) Controls what action must be taken when user interacts with system (in some cases) Controls the sequence of operations in an application(in some cases) The view should NEVER talk directly to the model (and vice versa).</description></item><item><title>DS 4100 Day 7</title><link>https://jaronoff97.github.io/archives/2017-01-31-ds-4100-day-7/</link><pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-31-ds-4100-day-7/</guid><description>DS 4100 Data Collection, Integration, and Analysis Today we&amp;rsquo;re talking about how to use excel to check the integrity of your results. It&amp;rsquo;s all about table lookup. Searches in excel can only return a single value.
Excel is boring and annoying and whenever I need to work in it, I&amp;rsquo;m either going to run SQL queries or write some python code to do whatever I want. We&amp;rsquo;ve been talking a lot about it, but I&amp;rsquo;m zoning out to it.</description></item><item><title>DS 4100 Week 3 Review</title><link>https://jaronoff97.github.io/archives/2017-01-29-ds-4100-week-3-review/</link><pubDate>Sun, 29 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-29-ds-4100-week-3-review/</guid><description>DS 4100 Weekly Review Very exicted for next week! This past week was pretty fun, I enjoyed getting the chance to use R&amp;rsquo;s interesting type system. Our assignment this week was to basically convert string -&amp;gt; datetime -&amp;gt; int -&amp;gt; datetime. I did this in a pretty interesting way. First, I made a new column in the data frame which represented the &amp;ldquo;Posix&amp;rdquo; version of the string in the &amp;ldquo;date&amp;rdquo; column.</description></item><item><title>CS 3500 Day 6</title><link>https://jaronoff97.github.io/archives/2017-01-27-cs-3500-day-6/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-27-cs-3500-day-6/</guid><description>Object Oriented Design Today we&amp;rsquo;re talking about the static keyword. Static properties are owned by a class not an object. A cooler way to use static, however, is with inner static classes.
class Widget { private Widget(...) { ... } public static class Factory { public Factory() { ... } public Widget create(...) { ... ++widgetIdCounter; ... } private int widgetIdCounter; } } Basically, the reason we do this is because we only want to make a factory in the context of widgets.</description></item><item><title>DS 4100 Day 6</title><link>https://jaronoff97.github.io/archives/2017-01-27-ds-4100-day-6/</link><pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-27-ds-4100-day-6/</guid><description>DS 4100 Data Collection, Integration, and Analysis A lot of assignments coming up so I may blog about that but TBD.
Today was a pretty insignificant day: we went over our future assignments, and then did a show and tell about our first assignment to see how many different ways there are to complete it. I anticipate there&amp;rsquo;s going to be a longer post on Monday.</description></item><item><title>CS 3500 Day 5</title><link>https://jaronoff97.github.io/archives/2017-01-24-cs-3500-day-5/</link><pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-24-cs-3500-day-5/</guid><description>Object Oriented Design As you may notice there is no part 4 because I didn&amp;rsquo;t go to class that day. We jump into class today with basic Java arrays.
Arrays int[] array1 = new int[] {2, 4, 6, 8}; int[] array2 = new int[54]; String[] array3 = new String[23]; Here&amp;rsquo;s how we use them:
int[] intArray = {2, 4, 6, 8}; assertEquals(4, intArray[1]); assertEquals(8, intArray[3]); intArray[3] = 17; assertEquals(17, intArray[3]); assertEquals(4, intArray.</description></item><item><title>DS 4100 Day 5</title><link>https://jaronoff97.github.io/archives/2017-01-24-ds-4100-day-5/</link><pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-24-ds-4100-day-5/</guid><description>DS 4100 Data Collection, Integration, and Analysis Like my OOD posts, I wasn&amp;rsquo;t here in class for day 4, so I&amp;rsquo;m skipping right to day 5. Today/ this week we&amp;rsquo;re doing data importing from multiple sources as well as scraping. We started by importing CSVs and txt files. Now we&amp;rsquo;re going to import from other normal files, JSON, and XML. Eventually we&amp;rsquo;re going to be getting data from databases.
Packages Packages are collections of R functions, data, and compield code in a well-defined format.</description></item><item><title>DS 4100 Week 2 Review</title><link>https://jaronoff97.github.io/archives/2017-01-22-ds-4100-week-2-review/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-22-ds-4100-week-2-review/</guid><description>DS 4100 Weekly Review Continuing my journey from last week, I was excited to begin this week devling more into the R programming language. It&amp;rsquo;s interesting and aggravating to learn about R. I talked with some of my friends about the strengths and (many) weeknesses of the language this week at NU Hacks. Many commented on how the type system allowed users to make many errors that could be easily prevented.</description></item><item><title>CS 3500 Day 3</title><link>https://jaronoff97.github.io/archives/2017-01-17-cs-3500-day-3/</link><pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-17-cs-3500-day-3/</guid><description>Object Oriented Design We&amp;rsquo;re back to talking about durations, and how we can make our own classes that we use basic operations on.
We want to be able to:
Compare Add Subtract Check Equality We&amp;rsquo;re going to be talking about hashCode() and equals(Object other)
The comparable interface enforces compareTo, equals, and hashCode. The abstract class we&amp;rsquo;ll design for Duration needs to have a conversion to seconds, a conversion to Hms (hours, minutes, seconds), and a way to add two durations to each other.</description></item><item><title>DS 4100 Day 3</title><link>https://jaronoff97.github.io/archives/2017-01-17-ds-4100-day-3/</link><pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-17-ds-4100-day-3/</guid><description>DS 4100 Data Collection, Integration, and Analysis Day 3, we&amp;rsquo;re going over basic control flow:
&amp;gt; for (i in 1:3) { print(paste(&amp;#34;i =&amp;#34;,i)) } [1] &amp;#34;i = 1&amp;#34; [1] &amp;#34;i = 2&amp;#34; [1] &amp;#34;i = 3&amp;#34; &amp;gt; i [1] 3 cities &amp;lt;- c(&amp;#34;Boston&amp;#34;, &amp;#34;New York&amp;#34;, &amp;#34;San Francisco&amp;#34;) for(city in cities) { print(city) } You can also use for loops to iterate data frames.
# create a data frame c1&amp;lt;-c(&amp;#34;AA&amp;#34;,&amp;#34;BB&amp;#34;,&amp;#34;CC&amp;#34;) c2&amp;lt;-c(11,22,33) df&amp;lt;-data.</description></item><item><title>DS 4100 Week 1 Review</title><link>https://jaronoff97.github.io/archives/2017-01-15-ds-4100-week-1-review/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-15-ds-4100-week-1-review/</guid><description>DS 4100 Weekly Review This week I began my journey into data science. It&amp;rsquo;s the first time I&amp;rsquo;ve taken a class like this, and so far I&amp;rsquo;m pretty excited. The class began with an introduction to our syllabus and other things we&amp;rsquo;re going to be doing in and out of class, including these blog reflections. In these reflections I&amp;rsquo;m going to be thinking about what I learned in class, and connecting it to what I&amp;rsquo;ve experienced in the world.</description></item><item><title>CS 3500 Day 2</title><link>https://jaronoff97.github.io/archives/2017-01-13-cs-3500-day-2/</link><pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-13-cs-3500-day-2/</guid><description>Object Oriented Design Second day of OOD we dive right in to books and citations. Basically we have books and two ways to cite them: MLA and APA. What happens when we want to add a new citation for websites. In our original system we just have to add one case. The racket code to do this properly looks like this:
;; new-article: String String String Number Number Number -&amp;gt; Publication ;; To construct a new article.</description></item><item><title>DS 4100 Day 2</title><link>https://jaronoff97.github.io/archives/2017-01-13-ds-4100-day-2/</link><pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-13-ds-4100-day-2/</guid><description>DS 4100 Data Collection, Integration, and Analysis Everyone is downloading R, meanwhile I&amp;rsquo;m just sitting here and finishing up Java.
Data is stored as objects in R. Objects are created by:
Reading data from an external file Retrieving data from a URL Creating an object directly from command line Instantiating an object from within a program Now we&amp;rsquo;re going over R, basically what I learned in the past (6) tutorials.</description></item><item><title>Learning R Part 6</title><link>https://jaronoff97.github.io/archives/2017-01-11-learning-r-part-6/</link><pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-11-learning-r-part-6/</guid><description>Learning R Part 6 Part 6. Oh god. This language. Let it be over. Well this is working with enviroments which will be useful for my data science classes. I&amp;rsquo;m gonna dive right in.
&amp;gt; library(pryr) &amp;gt; parenvs(all = True) Error: object &amp;#39;True&amp;#39; not found &amp;gt; parenvs(all = T) label name 1 &amp;lt;environment: R_GlobalEnv&amp;gt; &amp;#34;&amp;#34; 2 &amp;lt;environment: package:pryr&amp;gt; &amp;#34;package:pryr&amp;#34; 3 &amp;lt;environment: package:stats&amp;gt; &amp;#34;package:stats&amp;#34; 4 &amp;lt;environment: package:graphics&amp;gt; &amp;#34;package:graphics&amp;#34; 5 &amp;lt;environment: package:grDevices&amp;gt; &amp;#34;package:grDevices&amp;#34; 6 &amp;lt;environment: package:utils&amp;gt; &amp;#34;package:utils&amp;#34; 7 &amp;lt;environment: package:datasets&amp;gt; &amp;#34;package:datasets&amp;#34; 8 &amp;lt;environment: package:methods&amp;gt; &amp;#34;package:methods&amp;#34; 9 &amp;lt;environment: 0x7f9a81097d78&amp;gt; &amp;#34;Autoloads&amp;#34; 10 &amp;lt;environment: base&amp;gt; &amp;#34;&amp;#34; 11 &amp;lt;environment: R_EmptyEnv&amp;gt; &amp;#34;&amp;#34; &amp;gt; as.</description></item><item><title>CS 3500 Day 1</title><link>https://jaronoff97.github.io/archives/2017-01-10-cs-3500-day-1/</link><pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-10-cs-3500-day-1/</guid><description>Object Oriented Design This is my first post for OOD, I&amp;rsquo;m going to be using this as a place to take notes and write code.
Course Website
They say to use IntteliJ but like almost everything else I&amp;rsquo;m going to try and only use Sublime Text. I may have to make custom build scripts to match intelliJ projects, but I hate Android Studio (an IntelliJ fork) so I&amp;rsquo;m really going to try and steer clear from that.</description></item><item><title>DS 4100 Day 1</title><link>https://jaronoff97.github.io/archives/2017-01-10-ds-4100-day-1/</link><pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-10-ds-4100-day-1/</guid><description>DS 4100 Data Collection, Integration, and Analysis Course Website
Just like my CS 3500 posts, this series is for my data science class notes. This class is what most of my R tutorial posts have been for (I&amp;rsquo;m going to continue those until I finish the book). Here are the units:
Unit 1 - Essentials Concepts of Data Science Unit 2 - Programming in R for Data Science Unit 3 - Data Collection &amp;amp; Integration Unit 4 - Data Storage Unit 5 - Data Analytics Unit 6 - Python Programming for Data Science Unit 7 - Data Quality &amp;amp; Governance So it seems like we start with R, and eventually get to Python.</description></item><item><title>Learning R Part 5</title><link>https://jaronoff97.github.io/archives/2017-01-08-learning-r-part-5/</link><pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-08-learning-r-part-5/</guid><description>Learning R Part 5 Part 5, modifying values in R. I&amp;rsquo;m betting this is going to be a contiuation of the same. It seems we&amp;rsquo;re just going to combine setting values and indexing.
&amp;gt; vec &amp;lt;- c(0, 0, 0, 0, 0, 0) &amp;gt; vec [1] 0 0 0 0 0 0 &amp;gt; vec[1] [1] 0 &amp;gt; vec[1] &amp;lt;- 1000 &amp;gt; vec [1] 1000 0 0 0 0 0 &amp;gt; vec[c(1, 3, 5)] &amp;lt;- c(1, 1, 1) &amp;gt; vec [1] 1 0 1 0 1 0 &amp;gt; vec[4:6] &amp;lt;- vec[4:6] + 1 &amp;gt; vec [1] 1 0 1 1 2 1 &amp;gt; deck &amp;lt;- read.</description></item><item><title>Learning R Part 4</title><link>https://jaronoff97.github.io/archives/2017-01-07-learning-r-part-4/</link><pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-07-learning-r-part-4/</guid><description>Learning R Part 4 Part 4, R notation. This part is about shuffling, dealing, and accesing cards. Okay so, the first part is selecting values. Before anything I need to load the deck again.
&amp;gt; deck[ , ] (ALL THE CARDS) &amp;gt; deck[1,1] [1] king Levels: ace eight five four jack king nine queen seven six ten three two &amp;gt; deck[1, 1] [1] king Levels: ace eight five four jack king nine queen seven six ten three two &amp;gt; deck[1, c(1, 2, 3)] face suit value 1 king spades 13 &amp;gt; deck[1, 1:3] face suit value 1 king spades 13 &amp;gt; deck[c(1, 1), 1:3] face suit value 1 king spades 13 1.</description></item><item><title>Learning R Part 3</title><link>https://jaronoff97.github.io/archives/2017-01-06-learning-r-part-3/</link><pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-06-learning-r-part-3/</guid><description>Learning R Part 3 Part 3, this chapter is all about R objects and I&amp;rsquo;m not excited. R objects, from what I&amp;rsquo;ve gathered are barely objects. We start this chapter with a bunch of different data types. R has six basic atomic vector data types: doubles, integers, characters, logicals, complex, and raw.
&amp;gt; die &amp;lt;- c(1, 2, 3, 4, 5, 6) &amp;gt; die [1] 1 2 3 4 5 6 &amp;gt; is.</description></item><item><title>Learning R Part 2</title><link>https://jaronoff97.github.io/archives/2017-01-05-learning-r-part-2/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-05-learning-r-part-2/</guid><description>Learning R Part 2 Part 2, here we go! This next part is about packages and help pages. This chapter is pretty short, and basically wraps up the dice &amp;lsquo;project&amp;rsquo;. Now it&amp;rsquo;s time to install the qplot function which is part of the ggplot2 package.
&amp;gt; install.packages(&amp;#34;ggplot2&amp;#34;) (A BUNCH OF STUFF!!!!!) &amp;gt; qplot Error: object &amp;#39;qplot&amp;#39; not found &amp;gt; library(&amp;#34;ggplot2&amp;#34;) &amp;gt; qplot function (x, y = NULL, ..., data, facets = NULL, margins = FALSE, geom = &amp;#34;auto&amp;#34;, xlim = c(NA, NA), ylim = c(NA, NA), log = &amp;#34;&amp;#34;, main = NULL, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), asp = NA, stat = NULL, position = NULL) { if (!</description></item><item><title>Learning R Part 1</title><link>https://jaronoff97.github.io/archives/2017-01-04-learning-r-part-1/</link><pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-01-04-learning-r-part-1/</guid><description>Learning R Part 1 Okay so today I begin learning R for my data science class, I&amp;rsquo;m gonna try and make a post a day. From what a lot of my friends have told me R is a pretty crappy language, I&amp;rsquo;m excited to see what the language holds.
I&amp;rsquo;m going to be following the Hands-On Programming with R
To follow these tutorials, I&amp;rsquo;m going to be using the R repl (I installed a package in Sublime Text to handle all of that).</description></item><item><title>Connecting to the internet with Java</title><link>https://jaronoff97.github.io/archives/2016-05-29-connecting-to-the-internet-with-java/</link><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-29-connecting-to-the-internet-with-java/</guid><description>Connecting to the internet with Java Hello and welcome to my first Java tutorial. This is going to be my only text-based Java tutorial, the others will be videos. In this tutorial we&amp;rsquo;re going to go over how to make a URL request in Java.
First we&amp;rsquo;re going to make a class named FrameLayoutURLReader, this class will extend JFrame and implement ActionListener. By inheriting from JFrame, we make this program an application whose layout will be swing/ frame based.</description></item><item><title>Fourth Mirror Update</title><link>https://jaronoff97.github.io/archives/2016-05-26-fourth-mirror-update/</link><pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-26-fourth-mirror-update/</guid><description>Fourth Mirror Update Hello! This is my fourth post involving my smart mirror project!
Sorry I haven&amp;rsquo;t had a post recently, all of my work last week was non-post related. I&amp;rsquo;ve been working on my mirror&amp;rsquo;s software. I&amp;rsquo;ve got facial recognition working really well, it can recognize as many faces as there are in a picture with very good accuracy. I&amp;rsquo;ve also got finger recognition working well, it&amp;rsquo;s not near as good as facial recognition but its alright.</description></item><item><title>Part 4, Optionals, Extensions, and Protocols</title><link>https://jaronoff97.github.io/archives/2016-05-19-optionals-extensions-protocols/</link><pubDate>Thu, 19 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-19-optionals-extensions-protocols/</guid><description>Now that we&amp;rsquo;ve gotten over the hurdle of closures we can learn the last three things we need to know before we start iOS programming. Let&amp;rsquo;s start with Optionals.
Let&amp;rsquo;s make a class with a couple properties
class Person { var name: String var age: Int var street: String init(name: String, age: Int) { self.name = name self.age = age } } let jacob = Person(name: &amp;#34;Jacob&amp;#34;, age: 18) print(jacob) When you run this code, you&amp;rsquo;ll get two errors:</description></item><item><title>ARkit Part 1</title><link>https://jaronoff97.github.io/archives/2017-06-27-arkit-part-1/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2017-06-27-arkit-part-1/</guid><description>Today I&amp;rsquo;m beggining my series on ARKit, and I&amp;rsquo;m going to be working on a basic ARKit app, that&amp;rsquo;s going to involve some basic physics, and 3d modeling (two things I&amp;rsquo;m really terrible at.)
To start, I had to download iOS 11 on my devices and then I had to install the Xcode 9 beta which includes an easy starter for ARKit apps.
After starting up the simulator I realized that running the simulator would not work because it doesn&amp;rsquo;t have access to the camera.</description></item><item><title>Part 2, Swifty Stuff</title><link>https://jaronoff97.github.io/archives/2016-05-18-swifty-stuff/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-18-swifty-stuff/</guid><description>Welcome back to another glorious day of Swift! Today we&amp;rsquo;re going to learn about differnt data structures to make efficient and effective Object Oriented(OO) Code. The first one we&amp;rsquo;ll go over is the classic OO design: the class.
class Student { var name: String var age: Int var grade: String static let uniform_needed = false private var _homework: [String] = [] public var homework:[String]{ get { return _homework } } init(name:String, age:Int, grade:String) { self.</description></item><item><title>Part 3, Cool, Difficult Swift</title><link>https://jaronoff97.github.io/archives/2016-05-18-cool-difficult-swift/</link><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-18-cool-difficult-swift/</guid><description>Today is gonna be our toughest day yet, but by the end of it, you&amp;rsquo;re gonna know everything you have to about Swift.
Lets look back to our Student and Homework classes:
enum Subject { case English case Programming case Language case Science case History } struct Homework { var subject: Subject var due_date: String var name: String } class Student { var name: String var age: Int var grade: String static let uniform_needed = false private var _homework: [Homework] = [] public var homework:[Homework]{ get { return _homework } } init(name:String, age:Int, grade:String) { self.</description></item><item><title>Part 1, Welcome to Swift</title><link>https://jaronoff97.github.io/archives/2016-05-17-welcome-to-swift/</link><pubDate>Tue, 17 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-17-welcome-to-swift/</guid><description>Welcome to Swift! Swift is my favorite programming language right now for a bunch of reasons. If you&amp;rsquo;re familiar with a statically-typed language like Java, C, or C++, Swift will come as a breath of fresh air. Swift is a statically-typed, type-inferred language. This tutorial is meant for more experienced programmers, you should have a good understanding of either a statically-typed language like Java or a great understanding of a dynamically-typed language like Python.</description></item><item><title>Third Mirror Update</title><link>https://jaronoff97.github.io/archives/2016-05-16-third-mirror-update/</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-16-third-mirror-update/</guid><description>Third Mirror Update Hello! This is my third post involving my smart mirror project!
All the parts came in last week, and I spent the weekend setting up my raspberry pi with openCV, so that I could do facial recognition.
Using a bunch of tutorials online, I succesfully installed openCV 3 on my Raspberry Pi 3 Model B+ for python 2.7 AND python 3 1
After openCV was done, I turned my raspberry pi into a git server so I could work on the code on my computer.</description></item><item><title>Part 6, Final Python Project</title><link>https://jaronoff97.github.io/archives/2016-05-15-final-project/</link><pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-15-final-project/</guid><description>So lets make a program that uses everything we&amp;rsquo;ve learned. Let&amp;rsquo;s make a todolist!
todos=[] #Make an empty list of our todos Now to introduce a new way of programming in python
todos=[] def main(): #something will go here if __name__ == &amp;#39;__main__&amp;#39;: main() We&amp;rsquo;ve seen the first part before, we&amp;rsquo;re just making a method called main that takes no parameters. The second part is a bit weird, though. What it&amp;rsquo;s saying is if some variable built-in to python is equal to main call the main() method.</description></item><item><title>Part 5, Dictionaries</title><link>https://jaronoff97.github.io/archives/2016-05-14-dictionaries/</link><pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-14-dictionaries/</guid><description>Welcome back! Today is our last day of python and we&amp;rsquo;re going to cover the last part of basic python: dictionaries. Dictionaries work just like you&amp;rsquo;d expect. For every &amp;lsquo;key&amp;rsquo; in the dictionary there must be a corresponding value. Lets think about this like a literal dictionary:
mirriam_webster = { &amp;#34;Programming&amp;#34;:&amp;#34;the action or process of writing computer programs.&amp;#34;, &amp;#34;Python&amp;#34;:&amp;#34;a high-level general-purpose programming language.&amp;#34;, &amp;#34;Learning&amp;#34;:&amp;#34;the acquisition of knowledge or skills through experience, study, or by being taught&amp;#34; } To make a dictionary we use {}, curly brackets.</description></item><item><title>Part 4, More Loops</title><link>https://jaronoff97.github.io/archives/2016-05-13-control-flow-part-2/</link><pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-13-control-flow-part-2/</guid><description>And we&amp;rsquo;re back (after a slight hiatus)! Let another day of Python begin!! So let&amp;rsquo;s back up for a second. We can make variables really easily:
x=5 y=6 z=7 a=8 b=9#and so forth And right now if we wanted to print out all the numbers between 1 and 100 we could do this:
num=0 while num &amp;lt;= 100: print(num) num = num +1 This will print all the numbers between 0 and 100 (inclusive).</description></item><item><title>Part 2, More on Functions</title><link>https://jaronoff97.github.io/archives/2016-05-11-more-on-functions/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-11-more-on-functions/</guid><description>And we&amp;rsquo;re back! Let another day of Python begin!! Here&amp;rsquo;s where we left off:
{% highlight python %} def f(x): w = x * 10 print(w) {% endhighlight %}
So we know how to make numbers, and we know how to make functions that do stuff to those numbers. But what about other kinds of variables, letters? words? sentences? paragraphs? In the programming world we call those Strings!
Here&amp;rsquo;s how we make those:</description></item><item><title>Part 3, Control Flow</title><link>https://jaronoff97.github.io/archives/2016-05-12-control-flow/</link><pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-12-control-flow/</guid><description>And we&amp;rsquo;re back! Let another day of Python begin!! We know how to make variables (Strings and Numbers) and we know how to make functions that do stuff to those variables. But what if we want to do something different for each kind of variable we get? Well, the answer lies within one of the words in the previous sentence.
I wonder IF you&amp;rsquo;ll get it&amp;hellip;
{% highlight python %} def hello(foo=&amp;ldquo;hello&amp;rdquo;,bar=&amp;ldquo;world&amp;rdquo;): if bar is not &amp;ldquo;world&amp;rdquo;: print(&amp;ldquo;Who are you saying hello to?</description></item><item><title>Part 1, Welcome to python</title><link>https://jaronoff97.github.io/archives/2016-05-10-welcome-to-python/</link><pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-10-welcome-to-python/</guid><description>Welcome to Python! Python is a really great programming language, thats easy to learn and fun to use. In order to write python code, you have two options. You can use what&amp;rsquo;s called interactive mode which is done by going to terminal and typing
{% highlight bash %} python {% endhighlight %}
You should see the following pop up:
{% highlight bash %} Python 2.7 (#1, Feb 28 2010, 00:02:06) Type &amp;ldquo;help&amp;rdquo;, &amp;ldquo;copyright&amp;rdquo;, &amp;ldquo;credits&amp;rdquo; or &amp;ldquo;license&amp;rdquo; for more information.</description></item><item><title>First Mirror Update</title><link>https://jaronoff97.github.io/archives/archives/first-mirror-update/</link><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/archives/first-mirror-update/</guid><description>First Mirror Update Hello! This is my first post involving my smart mirror project!
I&amp;rsquo;ve been looking into which parts to buy for the project and here&amp;rsquo;s my running list:
HP Pavilion 21.5-Inch IPS LED HDMI VGA Monitor 1 CanaKit Raspberry Pi 3 with 2.5A Micro USB Power Supply (UL Listed) 2 Mirror? Right now, I&amp;rsquo;m not sure which order I should do this project in: Start with software and then build it in the mirror Start with the hardware and then make the software work</description></item><item><title>Second Mirror Update</title><link>https://jaronoff97.github.io/archives/2016-05-10-second-mirror-update/</link><pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate><guid>https://jaronoff97.github.io/archives/2016-05-10-second-mirror-update/</guid><description>Second Mirror Update Hello! This is my second post involving my smart mirror project!
The parts have been bought!
I got the raspberry pi and monitor I mentioned in the last post. In addition to that I got an 8mp, 1080p camera for my Raspberry Pi.
I also got and constructed the two-way mirror component. I bought a 30&amp;rsquo; by 36&amp;rsquo; piece of glass and a big roll of two-way mirror film.</description></item></channel></rss>